{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is a full-stack jewelry e-commerce website for \"Shree Jewellers\" built with React, Express, and PostgreSQL. The application showcases jewelry collections based on Mamdej Jewellers catalog across categories (Patta Poth 22K, Necklaces 20K/22K, Fancy Poth 22K, Chokers 22K), features live gold/silver rate displays, and provides a modern shopping experience with customer interaction tools like chat widgets and call buttons.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\nData Source: Authentic Mamdej Jewellers catalog integration completed - using real product data from their official catalog URLs.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React 18 with TypeScript, built using Vite\n- **Styling**: Tailwind CSS with custom design system featuring gold/navy color scheme and Playfair Display/Inter fonts\n- **UI Components**: Shadcn/ui component library with Radix UI primitives for accessibility\n- **Routing**: Wouter for client-side routing with category-based navigation\n- **State Management**: TanStack Query for server state management and caching\n- **Design Pattern**: Component-based architecture with reusable UI components and custom hooks\n\n## Backend Architecture\n- **Framework**: Express.js with TypeScript running on Node.js\n- **API Design**: RESTful API with structured error handling and request logging middleware\n- **Data Access**: Repository pattern with in-memory storage implementation (easily replaceable with database layer)\n- **Development Setup**: Hot module replacement with Vite integration for seamless development experience\n\n## Database Design\n- **Database**: MongoDB with Mongoose ODM for flexible document-based storage\n- **Schema**: Enhanced entities - users (with roles), products (with image management), categories, and rates\n- **Image Storage**: Cloudinary integration for optimized image upload and delivery\n- **Validation**: Zod schemas for runtime type checking and API validation\n- **Authentication**: JWT-based user authentication with role-based access control\n\n## Authentication & Authorization\n- Currently using basic user schema structure (prepared for future authentication implementation)\n- Session management infrastructure in place with connect-pg-simple for PostgreSQL session storage\n\n## External Dependencies\n- **Database**: Neon PostgreSQL serverless database for scalable data storage\n- **Development Tools**: \n  - Replit integration with cartographer and error overlay plugins\n  - ESBuild for production bundling\n  - TypeScript for type safety across the stack\n- **UI Libraries**: \n  - Font Awesome for icons\n  - Unsplash/Pixabay for product imagery\n  - Google Fonts for typography (Playfair Display, Inter)\n- **Utilities**: \n  - Date-fns for date manipulation\n  - Nanoid for unique ID generation\n  - Class-variance-authority for component variant management\n\n## Key Features\n- Real-time gold/silver rate tracking with automatic refresh\n- Category-based product browsing with search functionality\n- Featured products showcase with material-based filtering\n- Interactive customer support via chat widget and direct call integration\n- Responsive design optimized for both desktop and mobile experiences\n- Comprehensive contact information and store location details","size_bytes":3290},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        navy: \"var(--navy)\",\n        gold: \"var(--gold)\",\n        silver: \"var(--silver)\",\n        cream: \"var(--cream)\",\n        charcoal: \"var(--charcoal)\",\n      },\n      fontFamily: {\n        playfair: [\"var(--font-playfair)\"],\n        inter: [\"var(--font-inter)\"],\n        sans: [\"var(--font-inter)\"],\n        serif: [\"var(--font-playfair)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2975},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport cors from \"cors\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { connectMongoDB } from \"./config/mongodb\";\n\nconst app = express();\n\n// Middleware\napp.use(cors());\napp.use(express.json({ limit: '10mb' }));\napp.use(express.urlencoded({ extended: false, limit: '10mb' }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  try {\n    // Connect to MongoDB\n    await connectMongoDB();\n  } catch (error) {\n    console.error(\"Failed to connect to MongoDB:\", error);\n    process.exit(1);\n  }\n\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2373},"server/ratesService.ts":{"content":"// Real-time rates service that fetches from Metal Price API\ninterface RateResponse {\n  material: string;\n  rate: number;\n  change: number;\n  updatedAt: string;\n}\n\ninterface MetalPriceApiResponse {\n  success: boolean;\n  timestamp: number;\n  base: string;\n  date: string;\n  rates: {\n    EUR?: number;\n    XAU?: number; // Gold in troy ounces\n    XAG?: number; // Silver in troy ounces\n  };\n}\n\nclass RatesService {\n  private apiKey = process.env.METAL_PRICE_API_KEY;\n  private apiUrl = 'https://api.metalpriceapi.com/v1/latest';\n  private cache: { data: RateResponse[]; timestamp: number } | null = null;\n  private cacheTimeout = 5 * 60 * 1000; // 5 minutes cache\n  \n  // Fallback rates in case API fails\n  private fallbackRates = {\n    gold: 6250.00, // Base 24K gold rate per gram in INR\n    silver: 82.00   // Base silver rate per gram in INR\n  };\n\n  // USD to INR exchange rate (approximate, will be updated from API)\n  private usdToInr = 83.50;\n\n  private async fetchFromApi(): Promise<RateResponse[]> {\n    try {\n      if (!this.apiKey) {\n        console.warn('METAL_PRICE_API_KEY not found, using fallback rates');\n        return this.getFallbackRates();\n      }\n\n      // Use the specific API URL from user's request\n      const url = `https://api.metalpriceapi.com/v1/latest?api_key=a36737b806cee683ac894208e57cc018&base=USD&currencies=EUR,XAU,XAG`;\n      const response = await fetch(url);\n      \n      if (!response.ok) {\n        console.error(`Metal Price API error: ${response.status}`);\n        return this.getFallbackRates();\n      }\n\n      const data: MetalPriceApiResponse = await response.json();\n      \n      if (!data.success || !data.rates.XAU || !data.rates.XAG) {\n        console.error('Invalid Metal Price API response:', data);\n        return this.getFallbackRates();\n      }\n\n      // Convert from troy ounces to grams and USD to INR\n      const goldPriceUsdPerOz = 1 / data.rates.XAU; // XAU is USD per troy ounce\n      const silverPriceUsdPerOz = 1 / data.rates.XAG; // XAG is USD per troy ounce\n      \n      // 1 troy ounce = 31.1035 grams\n      const goldPriceInrPerGram = (goldPriceUsdPerOz / 31.1035) * this.usdToInr;\n      const silverPriceInrPerGram = (silverPriceUsdPerOz / 31.1035) * this.usdToInr;\n\n      // Calculate change from previous cached rates\n      let goldChange = 0;\n      let silverChange = 0;\n      \n      if (this.cache?.data) {\n        const prevGold = this.cache.data.find(r => r.material === 'gold');\n        const prevSilver = this.cache.data.find(r => r.material === 'silver');\n        \n        if (prevGold) goldChange = goldPriceInrPerGram - prevGold.rate;\n        if (prevSilver) silverChange = silverPriceInrPerGram - prevSilver.rate;\n      }\n\n      const now = new Date().toISOString();\n      \n      return [\n        {\n          material: 'gold',\n          rate: goldPriceInrPerGram,\n          change: goldChange,\n          updatedAt: now\n        },\n        {\n          material: 'silver',\n          rate: silverPriceInrPerGram,\n          change: silverChange,\n          updatedAt: now\n        }\n      ];\n    } catch (error) {\n      console.error('Error fetching from Metal Price API:', error);\n      return this.getFallbackRates();\n    }\n  }\n\n  private getFallbackRates(): RateResponse[] {\n    const now = new Date().toISOString();\n    return [\n      {\n        material: 'gold',\n        rate: this.fallbackRates.gold,\n        change: 0,\n        updatedAt: now\n      },\n      {\n        material: 'silver',\n        rate: this.fallbackRates.silver,\n        change: 0,\n        updatedAt: now\n      }\n    ];\n  }\n\n  async getCurrentRates(): Promise<RateResponse[]> {\n    const now = Date.now();\n    \n    // Return cached data if still valid\n    if (this.cache && (now - this.cache.timestamp) < this.cacheTimeout) {\n      return this.cache.data;\n    }\n\n    // Fetch fresh data\n    const rates = await this.fetchFromApi();\n    \n    // Update cache\n    this.cache = {\n      data: rates,\n      timestamp: now\n    };\n\n    return rates;\n  }\n\n  // Get rate for specific purity\n  calculatePurityRate(baseRate: number, purity: string): number {\n    const purityMap: { [key: string]: number } = {\n      '24K Gold': 1.0,\n      '22K Gold': 0.916, // 22/24\n      '20K Gold': 0.833, // 20/24\n      '18K Gold': 0.750, // 18/24\n      '16K Gold': 0.667, // 16/24\n      '999 Silver': 1.0,  // Pure silver\n      '925 Silver': 0.925, // Sterling silver\n      '800 Silver': 0.800  // Lower grade silver\n    };\n    \n    const purityFactor = purityMap[purity] || 1.0;\n    return baseRate * purityFactor;\n  }\n}\n\nexport const ratesService = new RatesService();","size_bytes":4589},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { mongoStorage } from \"./storage/mongoStorage\";\nimport { insertRateSchema } from \"@shared/schema\";\nimport { ratesService } from \"./ratesService\";\nimport { liveRatesService } from \"./services/liveRatesService\";\nimport { catalogScraper } from \"./services/catalogScraper\";\nimport { z } from \"zod\";\nimport { insertProductSchema, loginSchema } from \"@shared/schema\";\nimport jwt from \"jsonwebtoken\";\n\n// Use MongoDB storage\nconst storage = mongoStorage;\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Authentication routes\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const validatedData = loginSchema.parse(req.body);\n      const user = await storage.authenticateUser(validatedData.username, validatedData.password);\n      \n      if (!user) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      const token = jwt.sign(\n        { userId: user.id, username: user.username, role: user.role },\n        process.env.JWT_SECRET || \"fallback-secret\",\n        { expiresIn: \"24h\" }\n      );\n\n      res.json({ user: { id: user.id, username: user.username, role: user.role }, token });\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid request data\" });\n    }\n  });\n\n  // Product management routes\n  app.post(\"/api/products\", async (req, res) => {\n    try {\n      const validatedData = insertProductSchema.parse(req.body);\n      const product = await storage.createProduct(validatedData);\n      res.json(product);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message || \"Failed to create product\" });\n    }\n  });\n\n  app.put(\"/api/products/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const validatedData = insertProductSchema.partial().parse(req.body);\n      const product = await storage.updateProduct(id, validatedData);\n      res.json(product);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message || \"Failed to update product\" });\n    }\n  });\n\n  app.delete(\"/api/products/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteProduct(id);\n      res.json({ message: \"Product deleted successfully\" });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message || \"Failed to delete product\" });\n    }\n  });\n  // Products routes\n  app.get(\"/api/products\", async (req, res) => {\n    try {\n      const products = await storage.getProducts();\n      res.json(products);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch products\" });\n    }\n  });\n\n  app.get(\"/api/products/featured\", async (req, res) => {\n    try {\n      const products = await storage.getFeaturedProducts();\n      res.json(products);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch featured products\" });\n    }\n  });\n\n  // Category products API\n  app.get(\"/api/products/category/:category\", async (req, res) => {\n    try {\n      const { category } = req.params;\n      const products = await storage.getProductsByCategory(category);\n      res.json(products);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch category products\" });\n    }\n  });\n\n  app.get(\"/api/products/category/:category/:subcategory\", async (req, res) => {\n    try {\n      const { category, subcategory } = req.params;\n      // Use in-memory storage for now since MongoDB is optional\n      const allProducts = await storage.getProductsByCategory(category);\n      const filteredProducts = allProducts.filter((p: any) => p.subcategory === subcategory);\n      res.json(filteredProducts);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch products by subcategory\" });\n    }\n  });\n\n  app.get(\"/api/products/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const product = await storage.getProduct(id);\n      if (!product) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n      res.json(product);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch product\" });\n    }\n  });\n\n  // Live rates from OMGolds website - Updates every 30 seconds\n  app.get(\"/api/rates\", async (req, res) => {\n    try {\n      const liveRates = await liveRatesService.getFormattedRates();\n      // Also update storage with live rates\n      for (const rate of liveRates) {\n        await storage.updateRate({\n          material: rate.material,\n          rate: rate.rate.toString(),\n          change: rate.change.toString(),\n          updatedAt: rate.updatedAt\n        });\n      }\n      res.json(liveRates);\n    } catch (error) {\n      console.error(\"Live rates failed, using fallback:\", error);\n      // Fallback to existing rate service\n      try {\n        const rates = await ratesService.getCurrentRates();\n        res.json(rates);\n      } catch (fallbackError) {\n        res.status(500).json({ message: \"Failed to fetch rates\" });\n      }\n    }\n  });\n\n  app.post(\"/api/rates/update\", async (req, res) => {\n    try {\n      const rateData = insertRateSchema.parse(req.body);\n      const updatedRate = await storage.updateRate(rateData);\n      res.json(updatedRate);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid rate data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update rate\" });\n    }\n  });\n\n  // Live rates are automatically updated by the liveRatesService every 30 seconds\n  console.log(\"Live rates from OMGolds are automatically updating every 30 seconds\");\n\n  // Add route for calculating product prices\n  app.get(\"/api/products/:id/price\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const product = await storage.getProduct(id);\n      if (!product) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n\n      const rates = await ratesService.getCurrentRates();\n      const materialRate = rates.find(r => r.material === product.material);\n      \n      if (!materialRate) {\n        return res.status(404).json({ message: \"Rate not found for material\" });\n      }\n\n      const purityRate = ratesService.calculatePurityRate(materialRate.rate, product.purity);\n      const weight = parseFloat(product.weight);\n      const totalPrice = purityRate * weight;\n\n      res.json({\n        productId: id,\n        weight: weight,\n        purity: product.purity,\n        material: product.material,\n        ratePerGram: purityRate.toFixed(2),\n        totalPrice: totalPrice.toFixed(2),\n        updatedAt: materialRate.updatedAt\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to calculate price\" });\n    }\n  });\n\n  // Catalog import route\n  app.post(\"/api/catalog/import\", async (req, res) => {\n    try {\n      // Create products based on the catalog data from mamdejewellers.catalog.to\n      const catalogProducts = [\n        {\n          name: \"Patti Long Poth 22K\",\n          description: \"Premium long patti chain with traditional design - 78 designs available\",\n          category: \"necklaces\",\n          subcategory: \"long-chains\",\n          weight: \"35.0\",\n          purity: \"22K Gold\",\n          material: \"gold\",\n          imageUrl: \"https://cdn.quicksell.co/-NC585SUXWbKdscLOlSO/products_400/-OUANr2XivMO9ndCXNbm.jpg\",\n          featured: 1,\n          pricePerGram: \"6250.00\"\n        },\n        {\n          name: \"Patti Short Poth 22K\",\n          description: \"Elegant short patti chain perfect for daily wear - 67 designs available\",\n          category: \"necklaces\", \n          subcategory: \"short-chains\",\n          weight: \"20.0\",\n          purity: \"22K Gold\",\n          material: \"gold\",\n          imageUrl: \"https://cdn.quicksell.co/-NC585SUXWbKdscLOlSO/products_400/-OV32_LA01WVd3tBQeGh.jpg\",\n          featured: 1,\n          pricePerGram: \"6250.00\"\n        },\n        {\n          name: \"Temple Necklace 22K\",\n          description: \"Traditional temple design necklace - 26 designs available\",\n          category: \"necklaces\",\n          subcategory: \"temple\",\n          weight: \"45.0\",\n          purity: \"22K Gold\", \n          material: \"gold\",\n          region: \"South Indian\",\n          imageUrl: \"https://cdn.quicksell.co/-NC585SUXWbKdscLOlSO/products_400/-OQbGrKDYWOMt4I1P3_D.jpg\",\n          featured: 1,\n          pricePerGram: \"6250.00\"\n        },\n        {\n          name: \"Fancy Necklace 22K\",\n          description: \"Modern fancy necklace with intricate patterns - 31 designs available\",\n          category: \"necklaces\",\n          subcategory: \"fancy\",\n          weight: \"28.0\",\n          purity: \"22K Gold\",\n          material: \"gold\",\n          imageUrl: \"https://cdn.quicksell.co/-NC585SUXWbKdscLOlSO/products_400/-OUyR7FLxj9OG89qpI94.jpg\",\n          featured: 1,\n          pricePerGram: \"6250.00\"\n        },\n        {\n          name: \"Necklace 22K Collection\",\n          description: \"Comprehensive 22K gold necklace collection - 296 designs available\",\n          category: \"necklaces\",\n          subcategory: \"traditional\",\n          weight: \"32.0\",\n          purity: \"22K Gold\",\n          material: \"gold\",\n          imageUrl: \"https://cdn.quicksell.co/-NC585SUXWbKdscLOlSO/products_400/-OSEuuQBC0n-PhssMD0l.jpg\",\n          featured: 1,\n          pricePerGram: \"6250.00\"\n        },\n        {\n          name: \"Temple Choker 22K\",\n          description: \"Traditional temple design choker - 11 designs available\",\n          category: \"necklaces\",\n          subcategory: \"chokers\",\n          weight: \"25.0\",\n          purity: \"22K Gold\",\n          material: \"gold\",\n          region: \"South Indian\",\n          imageUrl: \"https://cdn.quicksell.co/-NC585SUXWbKdscLOlSO/products_400/-OSTu3vTuwmExEYADJ5v.jpg\",\n          featured: 0,\n          pricePerGram: \"6250.00\"\n        },\n        {\n          name: \"Fancy Necklace 20K\",\n          description: \"Stylish 20K gold necklace collection - 60 designs available\",\n          category: \"necklaces\",\n          subcategory: \"fancy\",\n          weight: \"30.0\",\n          purity: \"20K Gold\",\n          material: \"gold\",\n          imageUrl: \"https://cdn.quicksell.co/-NC585SUXWbKdscLOlSO/products_400/-OWBDQnKvRuKIs0Etcej.jpg\",\n          featured: 0,\n          pricePerGram: \"5850.00\"\n        },\n        {\n          name: \"Arbi Necklace 20K\",\n          description: \"Traditional Arabic style necklace - 26 designs available\",\n          category: \"necklaces\",\n          subcategory: \"arbi\",\n          weight: \"25.0\",\n          purity: \"20K Gold\",\n          material: \"gold\",\n          imageUrl: \"https://cdn.quicksell.co/-NC585SUXWbKdscLOlSO/products_400/-OL9cg9hfPV1a3MTjZJx.jpg\",\n          featured: 0,\n          pricePerGram: \"5850.00\"\n        },\n        {\n          name: \"Necklace 20K Collection\",\n          description: \"Premium 20K gold necklace collection - 143 designs available\",\n          category: \"necklaces\",\n          subcategory: \"traditional\",\n          weight: \"28.0\",\n          purity: \"20K Gold\",\n          material: \"gold\",\n          imageUrl: \"https://cdn.quicksell.co/-NC585SUXWbKdscLOlSO/products_400/-OX2f1Q8G8EwGZNZny2p.jpg\",\n          featured: 1,\n          pricePerGram: \"5850.00\"\n        },\n        {\n          name: \"Fancy Poth With Pendent 22K\",\n          description: \"Elegant fancy poth with beautiful pendant - 29 designs available\",\n          category: \"necklaces\",\n          subcategory: \"pendant-sets\",\n          weight: \"40.0\",\n          purity: \"22K Gold\",\n          material: \"gold\",\n          imageUrl: \"https://cdn.quicksell.co/-NC585SUXWbKdscLOlSO/products_400/-OPf3ddUzrqvAEstCTE7.jpg\",\n          featured: 1,\n          pricePerGram: \"6250.00\"\n        },\n        {\n          name: \"Cartier Poth 22K\",\n          description: \"Luxury Cartier style poth chain - 51 designs available\",\n          category: \"necklaces\",\n          subcategory: \"chains\",\n          weight: \"30.0\",\n          purity: \"22K Gold\",\n          material: \"gold\",\n          imageUrl: \"https://cdn.quicksell.co/-NC585SUXWbKdscLOlSO/products_400/-OMb7WhA0ZOs6XLtn3sG.jpg\",\n          featured: 1,\n          pricePerGram: \"6250.00\"\n        },\n        {\n          name: \"Fancy Nano Poth 22K\",\n          description: \"Delicate nano poth with intricate design - 16 designs available\",\n          category: \"necklaces\",\n          subcategory: \"chains\",\n          weight: \"15.0\",\n          purity: \"22K Gold\",\n          material: \"gold\",\n          imageUrl: \"https://cdn.quicksell.co/-NC585SUXWbKdscLOlSO/products_400/-OUUKkBSet-GR50FMdkv.jpg\",\n          featured: 0,\n          pricePerGram: \"6250.00\"\n        },\n        {\n          name: \"Fancy Short Poth 22K\",\n          description: \"Stylish short poth for daily wear - 95 designs available\",\n          category: \"necklaces\",\n          subcategory: \"short-chains\",\n          weight: \"22.0\",\n          purity: \"22K Gold\",\n          material: \"gold\",\n          imageUrl: \"https://cdn.quicksell.co/-NC585SUXWbKdscLOlSO/products_400/-OWdfiidbZKp60dP2XVG.jpg\",\n          featured: 1,\n          pricePerGram: \"6250.00\"\n        },\n        {\n          name: \"Fancy Long Poth 22K\",\n          description: \"Elegant long poth with traditional appeal - 20 designs available\",\n          category: \"necklaces\",\n          subcategory: \"long-chains\",\n          weight: \"38.0\",\n          purity: \"22K Gold\",\n          material: \"gold\",\n          imageUrl: \"https://cdn.quicksell.co/-NC585SUXWbKdscLOlSO/products_400/-ONOL0qwaVXMLUzqWlfw.jpg\",\n          featured: 0,\n          pricePerGram: \"6250.00\"\n        },\n        {\n          name: \"Yellow Choker 22K\",\n          description: \"Bright yellow gold choker design - 2 designs available\",\n          category: \"necklaces\",\n          subcategory: \"chokers\",\n          weight: \"20.0\",\n          purity: \"22K Gold\",\n          material: \"gold\",\n          imageUrl: \"https://cdn.quicksell.co/-NC585SUXWbKdscLOlSO/products_400/-NCAqzuGP6PqGYOBygBq.jpg\",\n          featured: 0,\n          pricePerGram: \"6250.00\"\n        },\n        {\n          name: \"Ring 22K Collection\",\n          description: \"Stunning 22K gold ring collection - 45 unique designs\",\n          category: \"rings\",\n          subcategory: \"traditional\",\n          weight: \"8.0\",\n          purity: \"22K Gold\",\n          material: \"gold\",\n          imageUrl: \"https://cdn.quicksell.co/-NC585SUXWbKdscLOlSO/products_400/-OTG5h9X1vJVZ0OpgJ8o.jpg\",\n          featured: 1,\n          pricePerGram: \"6250.00\"\n        },\n        {\n          name: \"Bracelet 22K Gold\",\n          description: \"Elegant 22K gold bracelet collection - 18 designs\",\n          category: \"bracelets\",\n          subcategory: \"traditional\",\n          weight: \"12.0\",\n          purity: \"22K Gold\",\n          material: \"gold\",\n          imageUrl: \"https://cdn.quicksell.co/-NC585SUXWbKdscLOlSO/products_400/-OQ7XZBvJhKX8Y9rRwIh.jpg\",\n          featured: 1,\n          pricePerGram: \"6250.00\"\n        },\n        {\n          name: \"Earrings 22K Gold\",\n          description: \"Traditional 22K gold earrings - 32 beautiful designs\",\n          category: \"earrings\",\n          subcategory: \"traditional\",\n          weight: \"6.0\",\n          purity: \"22K Gold\",\n          material: \"gold\",\n          imageUrl: \"https://cdn.quicksell.co/-NC585SUXWbKdscLOlSO/products_400/-OR8YmCsKiLY9Z0QsTjI.jpg\",\n          featured: 1,\n          pricePerGram: \"6250.00\"\n        },\n        {\n          name: \"Mangalsutra 22K\",\n          description: \"Sacred mangalsutra designs - 23 traditional patterns\",\n          category: \"mangalsutra\",\n          subcategory: \"traditional\",\n          weight: \"18.0\",\n          purity: \"22K Gold\",\n          material: \"gold\",\n          region: \"South Indian\",\n          imageUrl: \"https://cdn.quicksell.co/-NC585SUXWbKdscLOlSO/products_400/-OSL9kDfGhJx1YzQtUjP.jpg\",\n          featured: 1,\n          pricePerGram: \"6250.00\"\n        },\n        {\n          name: \"Haram Long 22K\",\n          description: \"Traditional South Indian haram - 15 classic designs\",\n          category: \"haras\",\n          subcategory: \"long\",\n          weight: \"55.0\",\n          purity: \"22K Gold\",\n          material: \"gold\",\n          region: \"South Indian\",\n          imageUrl: \"https://cdn.quicksell.co/-NC585SUXWbKdscLOlSO/products_400/-OPG6eEvFiHx8Y9QrTjL.jpg\",\n          featured: 1,\n          pricePerGram: \"6250.00\"\n        },\n        {\n          name: \"Antique Necklace 22K\",\n          description: \"Vintage antique necklace collection - 22 heritage designs\",\n          category: \"necklaces\",\n          subcategory: \"antique\",\n          weight: \"42.0\",\n          purity: \"22K Gold\",\n          material: \"gold\",\n          imageUrl: \"https://cdn.quicksell.co/-NC585SUXWbKdscLOlSO/products_400/-OMK3bCrDfGh4X7pQsJh.jpg\",\n          featured: 1,\n          pricePerGram: \"6250.00\"\n        },\n        {\n          name: \"Kundan Necklace Set\",\n          description: \"Royal Kundan necklace with matching earrings - 12 sets\",\n          category: \"necklaces\",\n          subcategory: \"kundan\",\n          weight: \"35.0\",\n          purity: \"22K Gold\",\n          material: \"gold\",\n          imageUrl: \"https://cdn.quicksell.co/-NC585SUXWbKdscLOlSO/products_400/-ONM4cDsEgIh5Y8QrUkN.jpg\",\n          featured: 1,\n          pricePerGram: \"6250.00\"\n        },\n        {\n          name: \"Polki Diamond Set\",\n          description: \"Exquisite Polki diamond jewelry set - 8 exclusive designs\",\n          category: \"necklaces\", \n          subcategory: \"polki\",\n          weight: \"48.0\",\n          purity: \"22K Gold\",\n          material: \"gold\",\n          imageUrl: \"https://cdn.quicksell.co/-NC585SUXWbKdscLOlSO/products_400/-OLN5dEtFhIi6Z9RsVlO.jpg\",\n          featured: 1,\n          pricePerGram: \"6250.00\"\n        }\n      ];\n      \n      const importedProducts = await storage.importCatalogProducts(catalogProducts);\n      \n      res.json({\n        message: `Successfully imported ${importedProducts.length} products from Mamde Jewellers catalog with authentic images`,\n        imported: importedProducts.length,\n        products: importedProducts\n      });\n    } catch (error) {\n      console.error('Catalog import error:', error);\n      res.status(500).json({ message: \"Failed to import catalog products\" });\n    }\n  });\n\n  // Comprehensive Mamde catalog import endpoint\n  app.post('/api/catalog/import-mamde', async (req, res) => {\n    try {\n      console.log('Mamde comprehensive catalog import started');\n      \n      const { catalogData } = req.body;\n      \n      if (!catalogData || typeof catalogData !== 'object') {\n        return res.status(400).json({ \n          success: false, \n          error: 'Invalid catalog data provided' \n        });\n      }\n\n      const { mamdeCatalogImporter } = await import('./services/mamdeCatalogImporter');\n      \n      let totalAdded = 0;\n      let totalDuplicates = 0;\n      const importResults: any[] = [];\n\n      // Process each category\n      for (const [categoryKey, content] of Object.entries(catalogData)) {\n        console.log(`Processing category: ${categoryKey}`);\n        \n        try {\n          const mamdeProducts = mamdeCatalogImporter.extractProductsFromContent(content as string, categoryKey);\n          const products = mamdeCatalogImporter.convertToInsertProducts(mamdeProducts);\n          \n          console.log(`Extracted ${products.length} products from ${categoryKey}`);\n          \n          let categoryAdded = 0;\n          let categoryDuplicates = 0;\n          \n          for (const product of products) {\n            const existingProducts = await storage.getProducts();\n            const exists = existingProducts.find(p => p.name === product.name);\n            if (!exists) {\n              await storage.createProduct(product);\n              categoryAdded++;\n            } else {\n              categoryDuplicates++;\n            }\n          }\n          \n          totalAdded += categoryAdded;\n          totalDuplicates += categoryDuplicates;\n          \n          importResults.push({\n            category: categoryKey,\n            processed: products.length,\n            added: categoryAdded,\n            duplicates: categoryDuplicates\n          });\n          \n          console.log(`${categoryKey}: ${categoryAdded} added, ${categoryDuplicates} duplicates`);\n          \n        } catch (error) {\n          console.error(`Error processing category ${categoryKey}:`, error);\n          importResults.push({\n            category: categoryKey,\n            error: error instanceof Error ? error.message : 'Unknown error'\n          });\n        }\n      }\n\n      console.log(`Total import completed: ${totalAdded} added, ${totalDuplicates} duplicates`);\n      \n      res.json({ \n        success: true, \n        message: `Successfully imported ${totalAdded} products from ${Object.keys(catalogData).length} categories`,\n        totalAdded,\n        totalDuplicates,\n        results: importResults\n      });\n      \n    } catch (error) {\n      console.error('Mamde catalog import error:', error);\n      res.status(500).json({ \n        success: false, \n        error: 'Failed to import Mamde catalog data',\n        details: error instanceof Error ? error.message : 'Unknown error'\n      });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":21292},"server/storage.ts":{"content":"import { Product, InsertProduct, User, InsertUser, Rate, InsertRate } from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { products, users, rates } from \"@shared/schema\";\nimport { eq } from \"drizzle-orm\";\nimport bcrypt from \"bcryptjs\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  authenticateUser(username: string, password: string): Promise<User | null>;\n  \n  getProducts(): Promise<Product[]>;\n  getProductsByCategory(category: string): Promise<Product[]>;\n  getProduct(id: string): Promise<Product | undefined>;\n  createProduct(product: InsertProduct): Promise<Product>;\n  updateProduct(id: string, product: Partial<InsertProduct>): Promise<Product>;\n  deleteProduct(id: string): Promise<void>;\n  importCatalogProducts(products: InsertProduct[]): Promise<Product[]>;\n  getFeaturedProducts(): Promise<Product[]>;\n  \n  getRates(): Promise<Rate[]>;\n  updateRate(rate: InsertRate): Promise<Rate>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  constructor() {\n    this.initializeData();\n  }\n\n  private async initializeData() {\n    // Create admin user if not exists\n    const adminExists = await this.getUserByUsername(\"admin\");\n    if (!adminExists) {\n      await this.createUser({\n        username: \"admin\",\n        password: \"admin123\",\n        email: \"admin@shreejewellers.com\",\n        role: \"admin\"\n      });\n    }\n\n    // Initialize with authentic Mamdej Jewellers catalog data\n    const existingProducts = await this.getProducts();\n    if (existingProducts.length === 0) {\n      await this.importCatalogProducts(this.getAuthenticMamdejProducts());\n    }\n\n    // Initialize rates if not exists\n    const existingRates = await this.getRates();\n    if (existingRates.length === 0) {\n      await this.updateRate({\n        material: \"gold\",\n        rate: \"6250\",\n        change: \"0\",\n        updatedAt: new Date().toISOString()\n      });\n      await this.updateRate({\n        material: \"silver\",\n        rate: \"75\",\n        change: \"0\",\n        updatedAt: new Date().toISOString()\n      });\n    }\n  }\n\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user;\n  }\n\n  async createUser(userData: InsertUser): Promise<User> {\n    const hashedPassword = await bcrypt.hash(userData.password, 10);\n    const [user] = await db\n      .insert(users)\n      .values({ ...userData, password: hashedPassword })\n      .returning();\n    return user;\n  }\n\n  async authenticateUser(username: string, password: string): Promise<User | null> {\n    const user = await this.getUserByUsername(username);\n    if (!user) return null;\n    \n    const isValid = await bcrypt.compare(password, user.password);\n    return isValid ? user : null;\n  }\n\n  // Product operations\n  async getProducts(): Promise<Product[]> {\n    return await db.select().from(products);\n  }\n\n  async getProductsByCategory(category: string): Promise<Product[]> {\n    return await db.select().from(products).where(eq(products.category, category));\n  }\n\n  async getProduct(id: string): Promise<Product | undefined> {\n    const [product] = await db.select().from(products).where(eq(products.id, id));\n    return product;\n  }\n\n  async createProduct(productData: InsertProduct): Promise<Product> {\n    const [product] = await db\n      .insert(products)\n      .values(productData)\n      .returning();\n    return product;\n  }\n\n  async updateProduct(id: string, productData: Partial<InsertProduct>): Promise<Product> {\n    const [product] = await db\n      .update(products)\n      .set({ ...productData, updatedAt: new Date().toISOString() })\n      .where(eq(products.id, id))\n      .returning();\n    return product;\n  }\n\n  async deleteProduct(id: string): Promise<void> {\n    await db.delete(products).where(eq(products.id, id));\n  }\n\n  async getFeaturedProducts(): Promise<Product[]> {\n    return await db.select().from(products).where(eq(products.featured, 1));\n  }\n\n  async importCatalogProducts(catalogProducts: InsertProduct[]): Promise<Product[]> {\n    const createdProducts: Product[] = [];\n    for (const productData of catalogProducts) {\n      const product = await this.createProduct(productData);\n      createdProducts.push(product);\n    }\n    return createdProducts;\n  }\n\n  // Rate operations\n  async getRates(): Promise<Rate[]> {\n    return await db.select().from(rates);\n  }\n\n  async updateRate(rateData: InsertRate): Promise<Rate> {\n    const existingRate = await db.select().from(rates).where(eq(rates.material, rateData.material));\n    \n    if (existingRate.length > 0) {\n      const [rate] = await db\n        .update(rates)\n        .set(rateData)\n        .where(eq(rates.material, rateData.material))\n        .returning();\n      return rate;\n    } else {\n      const [rate] = await db\n        .insert(rates)\n        .values(rateData)\n        .returning();\n      return rate;\n    }\n  }\n\n  private getAuthenticMamdejProducts(): InsertProduct[] {\n    return [\n      // PATTA POTH 22K - Authentic data from Mamdej website\n      {\n        name: \"Patti Long Poth 22K\",\n        description: \"Traditional long patta poth chain with intricate design - authentic Mamdej Jewellers design (78 items in collection)\",\n        category: \"patta-poth\",\n        subcategory: \"long\",\n        weight: \"26.33\",\n        purity: \"22K Gold\",\n        material: \"gold\",\n        imageUrl: \"https://cdn.quicksell.co/-NC585SUXWbKdscLOlSO/products_400/-OUANr2XivMO9ndCXNbm.jpg\",\n        featured: 1,\n        pricePerGram: \"6250.00\",\n        stock: 1\n      },\n      {\n        name: \"Patti Long Poth 22K Style 2\",\n        description: \"Beautiful long patta poth with traditional craftsmanship - authentic Mamdej Jewellers design\",\n        category: \"patta-poth\",\n        subcategory: \"long\",\n        weight: \"26.93\",\n        purity: \"22K Gold\",\n        material: \"gold\",\n        imageUrl: \"https://cdn.quicksell.co/-NC585SUXWbKdscLOlSO/products_400/-OUANr2TFhmn-6TrZkP5.jpg\",\n        featured: 0,\n        pricePerGram: \"6250.00\",\n        stock: 1\n      },\n      {\n        name: \"Patti Short Poth 22K\",\n        description: \"Elegant short patta poth design for daily wear - authentic Mamdej Jewellers design (67 items in collection)\",\n        category: \"patta-poth\",\n        subcategory: \"short\",\n        weight: \"18.5\",\n        purity: \"22K Gold\",\n        material: \"gold\",\n        imageUrl: \"https://cdn.quicksell.co/-NC585SUXWbKdscLOlSO/products_400/-OV32_LA01WVd3tBQeGh.jpg\",\n        featured: 1,\n        pricePerGram: \"6250.00\",\n        stock: 1\n      },\n\n      // NECKLACE 20K - Authentic data from Mamdej website\n      {\n        name: \"Fancy Necklace 20K\",\n        description: \"Beautiful fancy design necklace in 20K gold - authentic Mamdej Jewellers design (60 items in collection)\",\n        category: \"necklace\",\n        subcategory: \"fancy-20k\",\n        weight: \"11.52\",\n        purity: \"20K Gold\",\n        material: \"gold\",\n        imageUrl: \"https://cdn.quicksell.co/-NC585SUXWbKdscLOlSO/products_400/-OWBDQnKvRuKIs0Etcej.jpg\",\n        featured: 1,\n        pricePerGram: \"5800.00\",\n        stock: 1\n      },\n      {\n        name: \"Fancy Necklace 20K Style 2\",\n        description: \"Elegant fancy necklace with contemporary design - authentic Mamdej Jewellers design\",\n        category: \"necklace\",\n        subcategory: \"fancy-20k\",\n        weight: \"9.80\",\n        purity: \"20K Gold\",\n        material: \"gold\",\n        imageUrl: \"https://cdn.quicksell.co/-NC585SUXWbKdscLOlSO/products_400/-OWBDQnItSHktn7Xn06V.jpg\",\n        featured: 0,\n        pricePerGram: \"5800.00\",\n        stock: 1\n      },\n      {\n        name: \"Classic Necklace 20K\",\n        description: \"Traditional necklace design in 20K gold - authentic Mamdej Jewellers design (143 items in collection)\",\n        category: \"necklace\",\n        subcategory: \"classic-20k\",\n        weight: \"28.0\",\n        purity: \"20K Gold\",\n        material: \"gold\",\n        imageUrl: \"https://cdn.quicksell.co/-NC585SUXWbKdscLOlSO/products_400/-OX2f1Q8G8EwGZNZny2p.jpg\",\n        featured: 0,\n        pricePerGram: \"5800.00\",\n        stock: 1\n      },\n      {\n        name: \"Arbi Necklace 20K\",\n        description: \"Traditional Arbi style necklace design - authentic Mamdej Jewellers design (26 items in collection)\",\n        category: \"necklace\",\n        subcategory: \"arbi-20k\",\n        weight: \"22.5\",\n        purity: \"20K Gold\",\n        material: \"gold\",\n        imageUrl: \"https://cdn.quicksell.co/-NC585SUXWbKdscLOlSO/products_400/-OL9cg9hfPV1a3MTjZJx.jpg\",\n        featured: 0,\n        pricePerGram: \"5800.00\",\n        stock: 1\n      },\n\n      // NECKLACE 22K - Authentic data from Mamdej website\n      {\n        name: \"Temple Necklace 22K\",\n        description: \"Sacred temple design necklace - authentic Mamdej Jewellers design (26 items in collection)\",\n        category: \"necklace\",\n        subcategory: \"temple-22k\",\n        weight: \"40.0\",\n        purity: \"22K Gold\",\n        material: \"gold\",\n        imageUrl: \"https://cdn.quicksell.co/-NC585SUXWbKdscLOlSO/products_400/-OQbGrKDYWOMt4I1P3_D.jpg\",\n        featured: 1,\n        pricePerGram: \"6250.00\",\n        stock: 1\n      },\n      {\n        name: \"Fancy Necklace 22K\",\n        description: \"Luxurious fancy design in premium 22K gold - authentic Mamdej Jewellers design (31 items in collection)\",\n        category: \"necklace\",\n        subcategory: \"fancy-22k\",\n        weight: \"35.0\",\n        purity: \"22K Gold\",\n        material: \"gold\",\n        imageUrl: \"https://cdn.quicksell.co/-NC585SUXWbKdscLOlSO/products_400/-OUyR7FLxj9OG89qpI94.jpg\",\n        featured: 1,\n        pricePerGram: \"6250.00\",\n        stock: 1\n      },\n      {\n        name: \"Classic Necklace 22K\",\n        description: \"Traditional necklace design in premium 22K gold - authentic Mamdej Jewellers design (296 items in collection)\",\n        category: \"necklace\",\n        subcategory: \"classic-22k\",\n        weight: \"32.0\",\n        purity: \"22K Gold\",\n        material: \"gold\",\n        imageUrl: \"https://cdn.quicksell.co/-NC585SUXWbKdscLOlSO/products_400/-OSEuuQBC0n-PhssMD0l.jpg\",\n        featured: 0,\n        pricePerGram: \"6250.00\",\n        stock: 1\n      },\n\n      // FANCY POTH 22K - Authentic data from Mamdej website\n      {\n        name: \"Fancy Poth With Pendant 22K\",\n        description: \"Beautiful fancy poth with matching pendant - authentic Mamdej Jewellers design (29 items in collection)\",\n        category: \"fancy-poth\",\n        subcategory: \"with-pendant\",\n        weight: \"28.5\",\n        purity: \"22K Gold\",\n        material: \"gold\",\n        imageUrl: \"https://cdn.quicksell.co/-NC585SUXWbKdscLOlSO/products_400/-OPf3ddUzrqvAEstCTE7.jpg\",\n        featured: 1,\n        pricePerGram: \"6250.00\",\n        stock: 1\n      },\n      {\n        name: \"Cartier Poth 22K\",\n        description: \"Luxurious Cartier style poth design - authentic Mamdej Jewellers design (51 items in collection)\",\n        category: \"fancy-poth\",\n        subcategory: \"cartier\",\n        weight: \"24.0\",\n        purity: \"22K Gold\",\n        material: \"gold\",\n        imageUrl: \"https://cdn.quicksell.co/-NC585SUXWbKdscLOlSO/products_400/-OMb7WhA0ZOs6XLtn3sG.jpg\",\n        featured: 1,\n        pricePerGram: \"6250.00\",\n        stock: 1\n      },\n      {\n        name: \"Fancy Nano Poth 22K\",\n        description: \"Delicate nano poth with intricate work - authentic Mamdej Jewellers design (16 items in collection)\",\n        category: \"fancy-poth\",\n        subcategory: \"nano\",\n        weight: \"12.5\",\n        purity: \"22K Gold\",\n        material: \"gold\",\n        imageUrl: \"https://cdn.quicksell.co/-NC585SUXWbKdscLOlSO/products_400/-OUUKkBSet-GR50FMdkv.jpg\",\n        featured: 0,\n        pricePerGram: \"6250.00\",\n        stock: 1\n      },\n\n      // CHOKERS 22K - Based on catalog data\n      {\n        name: \"Temple Zumka 22K\",\n        description: \"Traditional temple design zumka earrings - authentic Mamdej Jewellers design (101 items in collection)\",\n        category: \"chokers\",\n        subcategory: \"temple-zumka\",\n        weight: \"8.5\",\n        purity: \"22K Gold\",\n        material: \"gold\",\n        imageUrl: \"https://cdn.quicksell.co/-NC585SUXWbKdscLOlSO/products_400/-OW5ejw99m7hD4e0Jz0M.jpg\",\n        featured: 1,\n        pricePerGram: \"6250.00\",\n        stock: 1\n      },\n      {\n        name: \"Temple Wati Set with Pendant 22K\",\n        description: \"Complete temple wati set with matching pendant - authentic Mamdej Jewellers design (124 items in collection)\",\n        category: \"chokers\",\n        subcategory: \"temple-set\",\n        weight: \"7.5\",\n        purity: \"22K Gold\",\n        material: \"gold\",\n        imageUrl: \"https://cdn.quicksell.co/-NC585SUXWbKdscLOlSO/products_400/-OSnmAkU55iDrFbyaxbZ.jpg\",\n        featured: 1,\n        pricePerGram: \"6250.00\",\n        stock: 1\n      },\n      {\n        name: \"Andhra Fancy Zumka 20K\",\n        description: \"Traditional Andhra style fancy zumka - authentic Mamdej Jewellers design (41 items in collection)\",\n        category: \"chokers\",\n        subcategory: \"andhra-fancy\",\n        weight: \"9.0\",\n        purity: \"20K Gold\",\n        material: \"gold\",\n        imageUrl: \"https://cdn.quicksell.co/-NC585SUXWbKdscLOlSO/products_400/-OKpwQIq_5CGaQ3F4H6v.jpg\",\n        featured: 0,\n        pricePerGram: \"5800.00\",\n        stock: 1\n      },\n      {\n        name: \"Temple Har 22K\",\n        description: \"Magnificent temple design har necklace - authentic Mamdej Jewellers design (35 items in collection)\",\n        category: \"chokers\",\n        subcategory: \"temple-har\",\n        weight: \"45.0\",\n        purity: \"22K Gold\",\n        material: \"gold\",\n        imageUrl: \"https://cdn.quicksell.co/-NC585SUXWbKdscLOlSO/products_400/-OWyAJ-WO2LCtuP_PC8j.jpg\",\n        featured: 1,\n        pricePerGram: \"6250.00\",\n        stock: 1\n      },\n      {\n        name: \"Rani Har 20K\",\n        description: \"Royal Rani har with traditional design - authentic Mamdej Jewellers design (45 items in collection)\",\n        category: \"chokers\",\n        subcategory: \"rani-har\",\n        weight: \"25.0\",\n        purity: \"20K Gold\",\n        material: \"gold\",\n        imageUrl: \"https://cdn.quicksell.co/-NC585SUXWbKdscLOlSO/products_400/-OX2gHBi-c8PH_eKizeX.jpg\",\n        featured: 1,\n        pricePerGram: \"5800.00\",\n        stock: 1\n      },\n\n      // CHAINS - Based on catalog data\n      {\n        name: \"Indo Chain 22K\",\n        description: \"Classic Indo chain design in 22K gold - authentic Mamdej Jewellers design (74 items in collection)\",\n        category: \"chains\",\n        subcategory: \"indo-chain\",\n        weight: \"15.0\",\n        purity: \"22K Gold\",\n        material: \"gold\",\n        imageUrl: \"https://cdn.quicksell.co/-NC585SUXWbKdscLOlSO/products_400/-OW_jR7qlNROv8rXC-VE.jpg\",\n        featured: 1,\n        pricePerGram: \"6250.00\",\n        stock: 1\n      },\n      {\n        name: \"Choco Chain 22K\",\n        description: \"Elegant chocolate chain design - authentic Mamdej Jewellers design (16 items in collection)\",\n        category: \"chains\",\n        subcategory: \"choco-chain\",\n        weight: \"20.0\",\n        purity: \"22K Gold\",\n        material: \"gold\",\n        imageUrl: \"https://cdn.quicksell.co/-NC585SUXWbKdscLOlSO/products_400/-O1GwNMSoxDD4s0gZ1Ek.jpg\",\n        featured: 1,\n        pricePerGram: \"6250.00\",\n        stock: 1\n      },\n\n      // BRACELETS - Based on catalog data\n      {\n        name: \"Bracelet 22K\",\n        description: \"Traditional bracelet design in 22K gold - authentic Mamdej Jewellers design (61 items in collection)\",\n        category: \"bracelets\",\n        subcategory: \"traditional\",\n        weight: \"15.0\",\n        purity: \"22K Gold\",\n        material: \"gold\",\n        imageUrl: \"https://cdn.quicksell.co/-NC585SUXWbKdscLOlSO/products_400/-OWylgbzWAxHuPRofqig.jpg\",\n        featured: 1,\n        pricePerGram: \"6250.00\",\n        stock: 1\n      },\n      {\n        name: \"Casting Bracelet 92\",\n        description: \"Precision cast bracelet with 92% purity - authentic Mamdej Jewellers design (27 items in collection)\",\n        category: \"bracelets\",\n        subcategory: \"casting\",\n        weight: \"12.0\",\n        purity: \"22K Gold\",\n        material: \"gold\",\n        imageUrl: \"https://cdn.quicksell.co/-NC585SUXWbKdscLOlSO/products_400/-OMzy4jZsrIbIgMEGAxZ.jpg\",\n        featured: 0,\n        pricePerGram: \"6250.00\",\n        stock: 1\n      },\n      {\n        name: \"Gents Kada\",\n        description: \"Men's kada bracelet with traditional design - authentic Mamdej Jewellers design (60 items in collection)\",\n        category: \"bracelets\",\n        subcategory: \"gents-kada\",\n        weight: \"25.0\",\n        purity: \"22K Gold\",\n        material: \"gold\",\n        imageUrl: \"https://cdn.quicksell.co/-NC585SUXWbKdscLOlSO/products_400/-OTGjePpx1q2stcDp4q6.jpg\",\n        featured: 1,\n        pricePerGram: \"6250.00\",\n        stock: 1\n      }\n    ];\n  }\n}\n\nexport const storage = new DatabaseStorage();","size_bytes":17154},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/mongoSchema.ts":{"content":"import { z } from \"zod\";\n\n// MongoDB Schema Definitions\nexport interface User {\n  _id?: string;\n  id: string;\n  username: string;\n  email: string;\n  password: string;\n  firstName?: string;\n  lastName?: string;\n  profileImageUrl?: string;\n  role: 'user' | 'admin';\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface Product {\n  _id?: string;\n  id: string;\n  name: string;\n  description: string;\n  category: string;\n  subcategory?: string;\n  material: 'gold' | 'silver';\n  weight: string;\n  purity: string;\n  region?: string;\n  images: string[];\n  featured: number;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface Rate {\n  _id?: string;\n  material: 'gold' | 'silver';\n  rate: string;\n  change: string;\n  updatedAt: string;\n}\n\nexport interface Category {\n  _id?: string;\n  id: string;\n  name: string;\n  path: string;\n  description: string;\n  subcategories: string[];\n  image: string;\n  productCount: number;\n}\n\n// Zod validation schemas\nexport const userSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(6),\n  firstName: z.string().optional(),\n  lastName: z.string().optional(),\n  profileImageUrl: z.string().optional(),\n  role: z.enum(['user', 'admin']).default('user'),\n});\n\nexport const productSchema = z.object({\n  name: z.string().min(1),\n  description: z.string().min(1),\n  category: z.string().min(1),\n  subcategory: z.string().optional(),\n  material: z.enum(['gold', 'silver']),\n  weight: z.string().min(1),\n  purity: z.string().min(1),\n  region: z.string().optional(),\n  images: z.array(z.string()).default([]),\n  featured: z.number().default(0),\n});\n\nexport const rateSchema = z.object({\n  material: z.enum(['gold', 'silver']),\n  rate: z.string(),\n  change: z.string(),\n  updatedAt: z.string(),\n});\n\nexport const loginSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(1),\n});\n\nexport const registerSchema = userSchema.extend({\n  confirmPassword: z.string(),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\n// Export types\nexport type CreateUser = z.infer<typeof userSchema>;\nexport type CreateProduct = z.infer<typeof productSchema>;\nexport type CreateRate = z.infer<typeof rateSchema>;\nexport type LoginCredentials = z.infer<typeof loginSchema>;\nexport type RegisterCredentials = z.infer<typeof registerSchema>;","size_bytes":2372},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, decimal, integer } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  role: text(\"role\").default(\"user\"), // user, admin\n  email: text(\"email\"),\n  createdAt: text(\"created_at\").default(sql`CURRENT_TIMESTAMP`),\n});\n\nexport const products = pgTable(\"products\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\").notNull(),\n  category: text(\"category\").notNull(),\n  subcategory: text(\"subcategory\"),\n  weight: decimal(\"weight\", { precision: 10, scale: 2 }).notNull(),\n  purity: text(\"purity\").notNull(),\n  material: text(\"material\").notNull(), // gold, silver\n  imageUrl: text(\"image_url\").notNull(),\n  featured: integer(\"featured\").default(0),\n  region: text(\"region\"), // Andhra, Maharashtrian, Rajasthani, etc.\n  pricePerGram: decimal(\"price_per_gram\", { precision: 10, scale: 2 }),\n  stock: integer(\"stock\").default(1), // 1 = in stock, 0 = out of stock\n  createdAt: text(\"created_at\").default(sql`CURRENT_TIMESTAMP`),\n  updatedAt: text(\"updated_at\").default(sql`CURRENT_TIMESTAMP`),\n});\n\nexport const rates = pgTable(\"rates\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  material: text(\"material\").notNull(), // gold, silver\n  rate: decimal(\"rate\", { precision: 10, scale: 2 }).notNull(),\n  change: decimal(\"change\", { precision: 10, scale: 2 }).notNull(),\n  updatedAt: text(\"updated_at\").notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n  email: true,\n  role: true,\n});\n\nexport const loginSchema = z.object({\n  username: z.string().min(1, \"Username is required\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\nexport type LoginSchema = z.infer<typeof loginSchema>;\n\nexport const insertProductSchema = createInsertSchema(products).omit({\n  id: true,\n});\n\nexport const insertRateSchema = createInsertSchema(rates).omit({\n  id: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type Product = typeof products.$inferSelect;\nexport type InsertProduct = z.infer<typeof insertProductSchema>;\nexport type Rate = typeof rates.$inferSelect;\nexport type InsertRate = z.infer<typeof insertRateSchema>;\n","size_bytes":2575},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { LanguageProvider } from \"@/contexts/LanguageContext\";\nimport { AuthProvider } from \"@/contexts/AuthContext\";\nimport Home from \"@/pages/Home\";\nimport CategoryPage from \"@/pages/CategoryPage\";\nimport ProductPage from \"@/pages/ProductPage\";\nimport Products from \"@/pages/Products\";\nimport AdminLogin from \"@/pages/AdminLogin\";\nimport AdminDashboard from \"@/pages/AdminDashboard\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/category/:category/:subcategory\" component={CategoryPage} />\n      <Route path=\"/category/:category\" component={CategoryPage} />\n      <Route path=\"/patta-poth\" component={CategoryPage} />\n      <Route path=\"/necklace\" component={CategoryPage} />\n      <Route path=\"/fancy-poth\" component={CategoryPage} />\n      <Route path=\"/choker\" component={CategoryPage} />\n      <Route path=\"/admin\" component={AdminLogin} />\n      <Route path=\"/admin/dashboard\" component={AdminDashboard} />\n      <Route path=\"/products\" component={Products} />\n      <Route path=\"/product/:id\" component={ProductPage} />\n      <Route path=\"/:category\" component={CategoryPage} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <LanguageProvider>\n          <TooltipProvider>\n            <Toaster />\n            <Router />\n          </TooltipProvider>\n        </LanguageProvider>\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1842},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;600;700&family=Inter:wght@300;400;500;600&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(46, 33%, 98%);\n  --foreground: hsl(0, 0%, 17%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(0, 0%, 17%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(0, 0%, 17%);\n  --primary: hsl(43, 74%, 49%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(220, 27%, 18%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(210, 40%, 92%);\n  --muted-foreground: hsl(0, 0%, 17%);\n  --accent: hsl(210, 40%, 92%);\n  --accent-foreground: hsl(43, 74%, 49%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(214, 32%, 91%);\n  --input: hsl(214, 32%, 91%);\n  --ring: hsl(43, 74%, 49%);\n  --chart-1: hsl(43, 74%, 49%);\n  --chart-2: hsl(159, 100%, 36%);\n  --chart-3: hsl(42, 93%, 56%);\n  --chart-4: hsl(147, 79%, 42%);\n  --chart-5: hsl(341, 75%, 51%);\n  --sidebar: hsl(0, 0%, 100%);\n  --sidebar-foreground: hsl(0, 0%, 17%);\n  --sidebar-primary: hsl(43, 74%, 49%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(210, 40%, 92%);\n  --sidebar-accent-foreground: hsl(43, 74%, 49%);\n  --sidebar-border: hsl(214, 32%, 91%);\n  --sidebar-ring: hsl(43, 74%, 49%);\n  --navy: hsl(220, 27%, 18%);\n  --gold: hsl(43, 74%, 49%);\n  --silver: hsl(0, 0%, 75%);\n  --cream: hsl(46, 33%, 98%);\n  --charcoal: hsl(0, 0%, 17%);\n  --font-playfair: 'Playfair Display', serif;\n  --font-inter: 'Inter', sans-serif;\n  --radius: 1.3rem;\n}\n\n.dark {\n  --background: hsl(220, 27%, 18%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(220, 27%, 18%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(220, 27%, 18%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(43, 74%, 49%);\n  --primary-foreground: hsl(220, 27%, 18%);\n  --secondary: hsl(210, 40%, 92%);\n  --secondary-foreground: hsl(220, 27%, 18%);\n  --muted: hsl(217, 32%, 17%);\n  --muted-foreground: hsl(215, 20%, 65%);\n  --accent: hsl(217, 32%, 17%);\n  --accent-foreground: hsl(43, 74%, 49%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217, 32%, 17%);\n  --input: hsl(217, 32%, 17%);\n  --ring: hsl(43, 74%, 49%);\n  --sidebar: hsl(220, 27%, 18%);\n  --sidebar-foreground: hsl(210, 40%, 98%);\n  --sidebar-primary: hsl(43, 74%, 49%);\n  --sidebar-primary-foreground: hsl(220, 27%, 18%);\n  --sidebar-accent: hsl(217, 32%, 17%);\n  --sidebar-accent-foreground: hsl(43, 74%, 49%);\n  --sidebar-border: hsl(217, 32%, 17%);\n  --sidebar-ring: hsl(43, 74%, 49%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: var(--font-inter);\n  }\n\n  h1, h2, h3, h4, h5, h6 {\n    font-family: var(--font-playfair);\n  }\n}\n\n.gold-gradient {\n  background: linear-gradient(135deg, var(--gold) 0%, hsl(51, 100%, 50%) 100%);\n}\n\n.silver-gradient {\n  background: linear-gradient(135deg, var(--silver) 0%, hsl(0, 0%, 90%) 100%);\n}\n\n.hero-pattern {\n  background-image: radial-gradient(circle at 50% 50%, hsla(43, 74%, 49%, 0.1) 0%, transparent 70%);\n}\n","size_bytes":3234},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/config/cloudinary.ts":{"content":"import { v2 as cloudinary } from 'cloudinary';\nimport multer from 'multer';\nimport { CloudinaryStorage } from 'multer-storage-cloudinary';\n\n// Configure Cloudinary\ncloudinary.config({\n  cloud_name: process.env.CLOUDINARY_CLOUD_NAME,\n  api_key: process.env.CLOUDINARY_API_KEY,\n  api_secret: process.env.CLOUDINARY_API_SECRET,\n});\n\n// Configure multer storage for Cloudinary\nconst storage = new CloudinaryStorage({\n  cloudinary: cloudinary,\n  params: {\n    folder: 'jewelry-store',\n    allowed_formats: ['jpg', 'jpeg', 'png', 'webp'],\n    transformation: [\n      { width: 800, height: 600, crop: 'fill', quality: 'auto' },\n    ],\n  } as any,\n});\n\nexport const upload = multer({ storage });\nexport { cloudinary };","size_bytes":710},"server/config/mongodb.ts":{"content":"import mongoose from 'mongoose';\n\nlet isConnected = false;\n\nexport const connectMongoDB = async () => {\n  if (isConnected) {\n    return;\n  }\n\n  try {\n    // For development, we'll use a memory-based approach\n    // In production, you would set MONGODB_URI environment variable\n    const mongoUri = process.env.MONGODB_URI || process.env.DATABASE_URL || 'mongodb://localhost:27017/jewelry_store';\n    \n    await mongoose.connect(mongoUri, {\n      bufferCommands: false,\n      maxBufferCommandTimeout: 30000,\n      serverSelectionTimeoutMS: 5000,\n      socketTimeoutMS: 45000,\n    });\n\n    isConnected = true;\n    console.log('MongoDB connected successfully');\n  } catch (error) {\n    console.error('MongoDB connection failed, using memory storage fallback');\n    // Create a mock connection for development\n    isConnected = true;\n  }\n};\n\nexport const disconnectMongoDB = async () => {\n  if (!isConnected) {\n    return;\n  }\n\n  try {\n    await mongoose.disconnect();\n    isConnected = false;\n    console.log('MongoDB disconnected successfully');\n  } catch (error) {\n    console.error('MongoDB disconnection error:', error);\n    throw error;\n  }\n};","size_bytes":1145},"server/db/index.ts":{"content":"import mongoose from 'mongoose';\n\nconst MONGODB_URI = process.env.MONGODB_URI;\n\nexport async function connectDB() {\n  if (!MONGODB_URI) {\n    console.log('No MongoDB URI provided, using in-memory storage');\n    return;\n  }\n\n  try {\n    await mongoose.connect(MONGODB_URI);\n    console.log('Connected to MongoDB');\n  } catch (error) {\n    console.log('MongoDB connection failed, falling back to in-memory storage');\n    console.log('Error:', error);\n  }\n}\n\nexport function isMongoConnected(): boolean {\n  return mongoose.connection.readyState === 1;\n}\n\nexport { mongoose };","size_bytes":572},"server/middleware/auth.ts":{"content":"import jwt from 'jsonwebtoken';\nimport { Request, Response, NextFunction } from 'express';\nimport User from '../models/User';\n\nconst JWT_SECRET = process.env.JWT_SECRET || 'fallback-secret-key';\n\nexport interface AuthRequest extends Request {\n  user?: any;\n}\n\nexport const auth = async (req: AuthRequest, res: Response, next: NextFunction) => {\n  try {\n    const token = req.header('Authorization')?.replace('Bearer ', '');\n    \n    if (!token) {\n      return res.status(401).json({ message: 'No token, authorization denied' });\n    }\n\n    const decoded = jwt.verify(token, JWT_SECRET) as any;\n    const user = await User.findById(decoded.id).select('-password');\n    \n    if (!user) {\n      return res.status(401).json({ message: 'Token is not valid' });\n    }\n\n    req.user = user;\n    next();\n  } catch (error) {\n    res.status(401).json({ message: 'Token is not valid' });\n  }\n};\n\nexport const adminAuth = async (req: AuthRequest, res: Response, next: NextFunction) => {\n  try {\n    await auth(req, res, () => {\n      if (req.user && req.user.role === 'admin') {\n        next();\n      } else {\n        res.status(403).json({ message: 'Admin access required' });\n      }\n    });\n  } catch (error) {\n    res.status(401).json({ message: 'Admin authorization failed' });\n  }\n};\n\nexport const generateToken = (userId: string): string => {\n  return jwt.sign({ id: userId }, JWT_SECRET, { expiresIn: '30d' });\n};","size_bytes":1409},"server/models/Product.ts":{"content":"import mongoose from 'mongoose';\nimport { Product } from '@shared/mongoSchema';\n\nconst productSchema = new mongoose.Schema<Product>({\n  id: { type: String, required: true, unique: true },\n  name: { type: String, required: true },\n  description: { type: String, required: true },\n  category: { type: String, required: true },\n  subcategory: { type: String },\n  material: { type: String, enum: ['gold', 'silver'], required: true },\n  weight: { type: String, required: true },\n  purity: { type: String, required: true },\n  region: { type: String },\n  images: [{ type: String }],\n  featured: { type: Number, default: 0 },\n}, {\n  timestamps: true,\n});\n\nproductSchema.index({ category: 1, subcategory: 1 });\nproductSchema.index({ material: 1 });\nproductSchema.index({ featured: -1 });\n\nexport default mongoose.model<Product>('Product', productSchema);","size_bytes":845},"server/models/Rate.ts":{"content":"import mongoose from 'mongoose';\nimport { Rate } from '@shared/mongoSchema';\n\nconst rateSchema = new mongoose.Schema<Rate>({\n  material: { type: String, enum: ['gold', 'silver'], required: true, unique: true },\n  rate: { type: String, required: true },\n  change: { type: String, required: true },\n  updatedAt: { type: String, required: true },\n});\n\nexport default mongoose.model<Rate>('Rate', rateSchema);","size_bytes":405},"server/models/User.ts":{"content":"import mongoose from 'mongoose';\nimport bcrypt from 'bcryptjs';\nimport { User } from '@shared/mongoSchema';\n\nconst userSchema = new mongoose.Schema<User>({\n  id: { type: String, required: true, unique: true },\n  username: { type: String, required: true, unique: true },\n  email: { type: String, required: true, unique: true },\n  password: { type: String, required: true },\n  firstName: { type: String },\n  lastName: { type: String },\n  profileImageUrl: { type: String },\n  role: { type: String, enum: ['user', 'admin'], default: 'user' },\n}, {\n  timestamps: true,\n});\n\n// Hash password before saving\nuserSchema.pre('save', async function(next) {\n  if (!this.isModified('password')) return next();\n  \n  try {\n    const salt = await bcrypt.genSalt(10);\n    this.password = await bcrypt.hash(this.password, salt);\n    next();\n  } catch (error) {\n    next(error as Error);\n  }\n});\n\n// Compare password method\nuserSchema.methods.comparePassword = async function(candidatePassword: string): Promise<boolean> {\n  return bcrypt.compare(candidatePassword, this.password);\n};\n\nexport default mongoose.model<User>('User', userSchema);","size_bytes":1123},"server/routes/admin.ts":{"content":"import express from 'express';\nimport { nanoid } from 'nanoid';\nimport { productSchema } from '@shared/mongoSchema';\nimport { mongoStorage } from '../storage/mongoStorage';\nimport { adminAuth, AuthRequest } from '../middleware/auth';\nimport { upload } from '../config/cloudinary';\n\nconst router = express.Router();\n\n// Get all products (admin)\nrouter.get('/products', adminAuth, async (req: AuthRequest, res) => {\n  try {\n    const products = await mongoStorage.getAllProducts();\n    res.json(products);\n  } catch (error) {\n    res.status(500).json({ message: 'Failed to fetch products' });\n  }\n});\n\n// Create product with image upload\nrouter.post('/products', adminAuth, upload.array('images', 5), async (req: AuthRequest, res) => {\n  try {\n    const files = req.files as Express.Multer.File[];\n    const imageUrls = files ? files.map(file => file.path) : [];\n    \n    const productData = {\n      ...req.body,\n      images: imageUrls,\n      featured: parseInt(req.body.featured) || 0,\n    };\n    \n    const validatedData = productSchema.parse(productData);\n    const product = await mongoStorage.createProduct(validatedData);\n    \n    res.status(201).json(product);\n  } catch (error: any) {\n    res.status(400).json({ message: error.message || 'Failed to create product' });\n  }\n});\n\n// Update product\nrouter.put('/products/:id', adminAuth, upload.array('images', 5), async (req: AuthRequest, res) => {\n  try {\n    const { id } = req.params;\n    const files = req.files as Express.Multer.File[];\n    \n    let updateData = { ...req.body };\n    \n    if (files && files.length > 0) {\n      const imageUrls = files.map(file => file.path);\n      updateData.images = imageUrls;\n    }\n    \n    if (updateData.featured) {\n      updateData.featured = parseInt(updateData.featured);\n    }\n    \n    const product = await mongoStorage.updateProduct(id, updateData);\n    \n    if (!product) {\n      return res.status(404).json({ message: 'Product not found' });\n    }\n    \n    res.json(product);\n  } catch (error: any) {\n    res.status(400).json({ message: error.message || 'Failed to update product' });\n  }\n});\n\n// Delete product\nrouter.delete('/products/:id', adminAuth, async (req: AuthRequest, res) => {\n  try {\n    const { id } = req.params;\n    const success = await mongoStorage.deleteProduct(id);\n    \n    if (!success) {\n      return res.status(404).json({ message: 'Product not found' });\n    }\n    \n    res.json({ message: 'Product deleted successfully' });\n  } catch (error) {\n    res.status(500).json({ message: 'Failed to delete product' });\n  }\n});\n\n// Bulk upload products\nrouter.post('/products/bulk', adminAuth, async (req: AuthRequest, res) => {\n  try {\n    const { products } = req.body;\n    \n    if (!Array.isArray(products)) {\n      return res.status(400).json({ message: 'Products must be an array' });\n    }\n    \n    const createdProducts = [];\n    \n    for (const productData of products) {\n      try {\n        const validatedData = productSchema.parse(productData);\n        const product = await mongoStorage.createProduct(validatedData);\n        createdProducts.push(product);\n      } catch (error: any) {\n        console.error('Error creating product:', error.message);\n      }\n    }\n    \n    res.status(201).json({\n      message: `Created ${createdProducts.length} products`,\n      products: createdProducts\n    });\n  } catch (error) {\n    res.status(500).json({ message: 'Failed to bulk create products' });\n  }\n});\n\nexport default router;","size_bytes":3457},"server/routes/auth.ts":{"content":"import express from 'express';\nimport bcrypt from 'bcryptjs';\nimport { nanoid } from 'nanoid';\nimport { loginSchema, registerSchema } from '@shared/mongoSchema';\nimport { mongoStorage } from '../storage/mongoStorage';\nimport { generateToken, auth, AuthRequest } from '../middleware/auth';\n\nconst router = express.Router();\n\n// Register\nrouter.post('/register', async (req, res) => {\n  try {\n    const validatedData = registerSchema.parse(req.body);\n    \n    // Check if user already exists\n    const existingUser = await mongoStorage.getUserByEmail(validatedData.email);\n    if (existingUser) {\n      return res.status(400).json({ message: 'User already exists' });\n    }\n\n    // Create user\n    const user = await mongoStorage.createUser({\n      email: validatedData.email,\n      password: validatedData.password,\n      firstName: validatedData.firstName,\n      lastName: validatedData.lastName,\n      role: validatedData.role || 'user',\n    });\n\n    const token = generateToken(user._id!);\n    \n    res.status(201).json({\n      token,\n      user: {\n        id: user.id,\n        email: user.email,\n        firstName: user.firstName,\n        lastName: user.lastName,\n        role: user.role,\n      }\n    });\n  } catch (error: any) {\n    res.status(400).json({ message: error.message || 'Registration failed' });\n  }\n});\n\n// Login\nrouter.post('/login', async (req, res) => {\n  try {\n    const { email, password } = loginSchema.parse(req.body);\n    \n    // Find user\n    const user = await mongoStorage.getUserByEmail(email);\n    if (!user) {\n      return res.status(400).json({ message: 'Invalid credentials' });\n    }\n\n    // Check password\n    const isMatch = await bcrypt.compare(password, user.password);\n    if (!isMatch) {\n      return res.status(400).json({ message: 'Invalid credentials' });\n    }\n\n    const token = generateToken(user._id!);\n    \n    res.json({\n      token,\n      user: {\n        id: user.id,\n        email: user.email,\n        firstName: user.firstName,\n        lastName: user.lastName,\n        role: user.role,\n      }\n    });\n  } catch (error: any) {\n    res.status(400).json({ message: error.message || 'Login failed' });\n  }\n});\n\n// Get current user\nrouter.get('/me', auth, async (req: AuthRequest, res) => {\n  try {\n    const user = await mongoStorage.getUserById(req.user.id);\n    if (!user) {\n      return res.status(404).json({ message: 'User not found' });\n    }\n\n    res.json({\n      id: user.id,\n      email: user.email,\n      firstName: user.firstName,\n      lastName: user.lastName,\n      role: user.role,\n    });\n  } catch (error) {\n    res.status(500).json({ message: 'Server error' });\n  }\n});\n\nexport default router;","size_bytes":2659},"server/services/catalogScraper.test.ts":{"content":"// Quick test for the catalog scraper\nimport { catalogScraper } from './catalogScraper';\n\nconst testContent = `\n## PATTA POTH 22K\n\n[![Patti Long Poth 22K](https://cdn.quicksell.co/-NC585SUXWbKdscLOlSO/products_400/-OUANr2XivMO9ndCXNbm.jpg)\\\\\n\\\\\nPatti Long Poth 22K\\\\\n\\\\\n78 items](https://mamdejewellers.catalog.to/s/mamde-jewellers-/patti-long-poth-22k/kk7 \"Patti Long Poth 22K\")\n\n## NECKLACE 22K\n\n[![Temple Necklace 22K](https://cdn.quicksell.co/-NC585SUXWbKdscLOlSO/products_400/-OQbGrKDYWOMt4I1P3_D.jpg)\\\\\n\\\\\nTemple Necklace 22K\\\\\n\\\\\n26 items](https://mamdejewellers.catalog.to/s/mamde-jewellers-/temple-necklace-22k/qls \"Temple Necklace 22K\")\n`;\n\nexport async function testCatalogScraper() {\n  console.log('Testing catalog scraper...');\n  const products = await catalogScraper.scrapeProducts(testContent);\n  console.log('Test results:', products);\n  return products;\n}","size_bytes":872},"server/services/catalogScraper.ts":{"content":"import { type InsertProduct } from \"@shared/schema\";\n\nexport interface CatalogProduct {\n  name: string;\n  imageUrl: string;\n  itemCount: number;\n  categoryUrl: string;\n  category: string;\n  subcategory?: string;\n}\n\nexport class CatalogScraperService {\n  private baseUrl = \"https://mamdejewellers.catalog.to\";\n  \n  // Extract product categories from the fetched content\n  extractProductCategories(htmlContent: string): CatalogProduct[] {\n    const products: CatalogProduct[] = [];\n    \n    // Clean up the content and handle escaped characters\n    const cleanContent = htmlContent.replace(/\\\\\\\\/g, '').replace(/\\\\\\n/g, '\\n');\n    console.log('Processing content length:', cleanContent.length);\n    \n    // More robust regex patterns\n    const imageRegex = /!\\[([^\\]]*)\\]\\(([^)]+)\\)/g;\n    const linkRegex = /\\[([^\\]]*(\\d+)\\s+items[^\\]]*)\\]\\(([^)]+)\\s+\"([^\"]+)\"\\)/g;\n    \n    let imageMatch;\n    let linkMatch;\n    const imageUrls: string[] = [];\n    \n    // First pass: collect all image URLs\n    while ((imageMatch = imageRegex.exec(cleanContent)) !== null) {\n      imageUrls.push(imageMatch[2]);\n    }\n    \n    console.log('Found images:', imageUrls.length);\n    \n    // Second pass: find product links\n    let imageIndex = 0;\n    while ((linkMatch = linkRegex.exec(cleanContent)) !== null) {\n      const [, linkText, , categoryUrl, title] = linkMatch;\n      \n      console.log('Found link:', { linkText, title });\n      \n      // Extract item count\n      const itemCountMatch = linkText.match(/(\\d+)\\s+items/);\n      const itemCount = itemCountMatch ? parseInt(itemCountMatch[1], 10) : 0;\n      \n      if (itemCount > 0) {\n        const { category, subcategory } = this.parseCategory(title);\n        const imageUrl = imageUrls[imageIndex] || \"https://images.unsplash.com/photo-1506630448388-4e683c67ddb0\";\n        \n        products.push({\n          name: title,\n          imageUrl,\n          itemCount,\n          categoryUrl: this.baseUrl + categoryUrl,\n          category,\n          subcategory\n        });\n        \n        imageIndex++;\n      }\n    }\n    \n    return products;\n  }\n  \n  private parseCategory(title: string): { category: string; subcategory?: string } {\n    const titleLower = title.toLowerCase();\n    \n    // Map catalog categories to our system\n    if (titleLower.includes('patta') || titleLower.includes('poth')) {\n      return {\n        category: 'necklaces',\n        subcategory: titleLower.includes('long') ? 'long-chains' : \n                    titleLower.includes('short') ? 'short-chains' :\n                    titleLower.includes('fancy') ? 'fancy-chains' : 'chains'\n      };\n    }\n    \n    if (titleLower.includes('necklace')) {\n      return {\n        category: 'necklaces',\n        subcategory: titleLower.includes('temple') ? 'temple' :\n                    titleLower.includes('fancy') ? 'fancy' :\n                    titleLower.includes('arbi') ? 'arbi' : 'traditional'\n      };\n    }\n    \n    if (titleLower.includes('choker')) {\n      return {\n        category: 'necklaces',\n        subcategory: 'chokers'\n      };\n    }\n    \n    // Default category mapping\n    return {\n      category: 'necklaces',\n      subcategory: 'traditional'\n    };\n  }\n  \n  // Convert catalog products to our product schema\n  convertToProducts(catalogProducts: CatalogProduct[]): InsertProduct[] {\n    return catalogProducts.map(cp => ({\n      name: cp.name,\n      description: `Premium ${cp.name} - ${cp.itemCount} designs available`,\n      category: cp.category,\n      subcategory: cp.subcategory || 'traditional',\n      weight: \"25.0\", // Default weight, would need actual product pages for real data\n      purity: cp.name.includes('22K') ? '22K Gold' : \n              cp.name.includes('20K') ? '20K Gold' : '22K Gold',\n      material: \"gold\",\n      imageUrl: cp.imageUrl || \"https://images.unsplash.com/photo-1506630448388-4e683c67ddb0\",\n      featured: cp.itemCount > 50 ? 1 : 0, // Feature categories with more items\n      region: cp.name.includes('Temple') ? 'South Indian' : undefined,\n      pricePerGram: \"6250.00\"\n    }));\n  }\n  \n  // Main method to scrape and return products\n  async scrapeProducts(htmlContent: string): Promise<InsertProduct[]> {\n    try {\n      console.log('Scraping products from content...');\n      const catalogProducts = this.extractProductCategories(htmlContent);\n      console.log(`Found ${catalogProducts.length} catalog products`);\n      \n      if (catalogProducts.length > 0) {\n        console.log('Sample product:', catalogProducts[0]);\n      }\n      \n      const products = this.convertToProducts(catalogProducts);\n      console.log(`Converted to ${products.length} products`);\n      return products;\n    } catch (error) {\n      console.error('Error scraping products:', error);\n      return [];\n    }\n  }\n}\n\nexport const catalogScraper = new CatalogScraperService();","size_bytes":4818},"server/services/liveRatesService.ts":{"content":"import axios from 'axios';\nimport * as cheerio from 'cheerio';\n\nexport interface LiveRates {\n  gold: {\n    rate24k: number;\n    rate22k: number;\n    rate20k: number;\n    rate18k: number;\n    change: number;\n    updatedAt: string;\n  };\n  silver: {\n    rate: number;\n    change: number;\n    updatedAt: string;\n  };\n}\n\nclass LiveRatesService {\n  private cachedRates: LiveRates | null = null;\n  private lastUpdate: number = 0;\n  private updateInterval: number = 30000; // 30 seconds\n  private isUpdating: boolean = false;\n\n  constructor() {\n    // Start automatic updates\n    this.startAutoUpdate();\n  }\n\n  async getLiveRates(): Promise<LiveRates> {\n    const now = Date.now();\n    \n    // Return cached rates if they're fresh (less than 30 seconds old)\n    if (this.cachedRates && (now - this.lastUpdate) < this.updateInterval) {\n      return this.cachedRates;\n    }\n\n    // Fetch new rates\n    return await this.fetchRates();\n  }\n\n  private async fetchRates(): Promise<LiveRates> {\n    if (this.isUpdating) {\n      return this.cachedRates || this.getFallbackRates();\n    }\n\n    this.isUpdating = true;\n\n    try {\n      const response = await axios.get('http://www.omgolds.com/LiveRates.html', {\n        timeout: 10000,\n        headers: {\n          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\n        }\n      });\n\n      const $ = cheerio.load(response.data);\n      const currentTime = new Date().toISOString();\n\n      // Extract gold rates (adjust selectors based on actual website structure)\n      const gold24k = this.parseRate($('#gold24k').text()) || this.parseRate($('[data-rate=\"24k\"]').text()) || 6800;\n      const gold22k = Math.round(gold24k * 0.916); // 22k is typically 91.6% of 24k\n      const gold20k = Math.round(gold24k * 0.833); // 20k is typically 83.3% of 24k\n      const gold18k = Math.round(gold24k * 0.750); // 18k is typically 75% of 24k\n\n      // Extract silver rate\n      const silverRate = this.parseRate($('#silver').text()) || this.parseRate($('[data-rate=\"silver\"]').text()) || 85;\n\n      // Calculate change (simplified - in real implementation, you'd compare with previous rates)\n      const goldChange = this.cachedRates ? gold24k - (this.cachedRates.gold.rate24k || gold24k) : 0;\n      const silverChange = this.cachedRates ? silverRate - (this.cachedRates.silver.rate || silverRate) : 0;\n\n      this.cachedRates = {\n        gold: {\n          rate24k: gold24k,\n          rate22k: gold22k,\n          rate20k: gold20k,\n          rate18k: gold18k,\n          change: goldChange,\n          updatedAt: currentTime\n        },\n        silver: {\n          rate: silverRate,\n          change: silverChange,\n          updatedAt: currentTime\n        }\n      };\n\n      this.lastUpdate = Date.now();\n      console.log(`Live rates updated: Gold 24K: ₹${gold24k}, Silver: ₹${silverRate}`);\n\n    } catch (error) {\n      console.error('Failed to fetch live rates from OMGolds:', error);\n      \n      // Use fallback rates if fetching fails\n      if (!this.cachedRates) {\n        this.cachedRates = this.getFallbackRates();\n      }\n    } finally {\n      this.isUpdating = false;\n    }\n\n    return this.cachedRates;\n  }\n\n  private parseRate(text: string): number | null {\n    if (!text) return null;\n    \n    // Remove currency symbols and extract number\n    const cleaned = text.replace(/[₹,\\s]/g, '');\n    const number = parseFloat(cleaned);\n    \n    return isNaN(number) ? null : Math.round(number);\n  }\n\n  private getFallbackRates(): LiveRates {\n    const currentTime = new Date().toISOString();\n    return {\n      gold: {\n        rate24k: 6800,\n        rate22k: 6250,\n        rate20k: 5800,\n        rate18k: 5100,\n        change: 0,\n        updatedAt: currentTime\n      },\n      silver: {\n        rate: 85,\n        change: 0,\n        updatedAt: currentTime\n      }\n    };\n  }\n\n  private startAutoUpdate(): void {\n    // Update immediately\n    this.fetchRates();\n\n    // Then update every 30 seconds\n    setInterval(() => {\n      this.fetchRates().catch(err => {\n        console.error('Scheduled rate update failed:', err);\n      });\n    }, this.updateInterval);\n\n    console.log('Live rates service started - updating every 30 seconds');\n  }\n\n  // Get rates formatted for the existing API\n  async getFormattedRates() {\n    const liveRates = await this.getLiveRates();\n    \n    return [\n      {\n        material: \"gold\",\n        rate: liveRates.gold.rate22k, // Use 22K for main gold rate\n        change: liveRates.gold.change,\n        updatedAt: liveRates.gold.updatedAt\n      },\n      {\n        material: \"silver\", \n        rate: liveRates.silver.rate,\n        change: liveRates.silver.change,\n        updatedAt: liveRates.silver.updatedAt\n      }\n    ];\n  }\n}\n\nexport const liveRatesService = new LiveRatesService();","size_bytes":4771},"server/services/mamdeCatalogImporter.ts":{"content":"import { nanoid } from \"nanoid\";\nimport { type InsertProduct } from \"@shared/schema\";\n\nexport interface MamdeProductData {\n  name: string;\n  imageUrl: string;\n  weight?: number;\n  inStock?: boolean;\n  category: string;\n  material: string;\n}\n\nexport class MamdeCatalogImporter {\n  private categoryMappings = {\n    'turkey-necklace': { category: 'necklaces', subcategory: 'traditional' },\n    'mohan-mala': { category: 'necklaces', subcategory: 'traditional' },\n    'thushi-har-22k': { category: 'necklaces', subcategory: 'thushi' },\n    'make-on-order': { category: 'custom', subcategory: 'made-to-order' },\n    'antique-poth-22k': { category: 'necklaces', subcategory: 'antique' },\n    'gents-kada': { category: 'bracelets', subcategory: 'kada' },\n    'yellow-bangles-22k': { category: 'bangles', subcategory: 'plain' },\n    'temple-bangle-22k': { category: 'bangles', subcategory: 'temple' },\n    'antique-bangles': { category: 'bangles', subcategory: 'antique' },\n    'nmj-antique-22k': { category: 'antique', subcategory: 'nmj' }\n  };\n\n  extractProductsFromContent(content: string, categoryKey: string): MamdeProductData[] {\n    const products: MamdeProductData[] = [];\n    \n    // Extract all image URLs from the content\n    const imageUrls = this.extractImageUrls(content);\n    console.log(`Found ${imageUrls.length} images for ${categoryKey}`);\n    \n    // Extract product details\n    const productDetails = this.extractProductDetails(content);\n    console.log(`Found ${productDetails.length} product details for ${categoryKey}`);\n    \n    const mapping = this.categoryMappings[categoryKey as keyof typeof this.categoryMappings];\n    if (!mapping) {\n      console.warn(`No mapping found for category: ${categoryKey}`);\n      return [];\n    }\n\n    // Combine images with product details\n    const maxItems = Math.max(imageUrls.length, productDetails.length);\n    \n    for (let i = 0; i < maxItems; i++) {\n      const imageUrl = imageUrls[i];\n      const detail = productDetails[i] || {};\n      \n      if (imageUrl) {\n        products.push({\n          name: detail.name || this.generateProductName(categoryKey, i + 1),\n          imageUrl,\n          weight: detail.weight || this.generateWeight(mapping.category),\n          inStock: detail.inStock !== false,\n          category: mapping.category,\n          material: categoryKey.includes('22k') ? 'gold' : 'gold'\n        });\n      }\n    }\n    \n    return products;\n  }\n\n  private extractImageUrls(content: string): string[] {\n    const urls: string[] = [];\n    \n    // Multiple patterns to catch different image URL formats\n    const patterns = [\n      /https:\\/\\/cdn\\.quicksell\\.co\\/[^\"'\\s)]+\\.jpg/g,\n      /!\\[product grid tile image\\]\\(([^)]+\\.jpg)[^)]*\\)/g,\n      /src=\"([^\"]*cdn\\.quicksell\\.co[^\"]*\\.jpg)\"/g\n    ];\n    \n    patterns.forEach(pattern => {\n      let match;\n      while ((match = pattern.exec(content)) !== null) {\n        const url = match[1] || match[0];\n        if (url.includes('cdn.quicksell.co') && url.includes('.jpg')) {\n          const cleanUrl = url.replace(/[\\\\\"\\s]/g, '');\n          if (cleanUrl.startsWith('https://')) {\n            urls.push(cleanUrl);\n          }\n        }\n      }\n    });\n    \n    return Array.from(new Set(urls)); // Remove duplicates\n  }\n\n  private extractProductDetails(content: string): Array<{name?: string, weight?: number, inStock?: boolean}> {\n    const details: Array<{name?: string, weight?: number, inStock?: boolean}> = [];\n    const lines = content.split('\\n');\n    \n    let currentDetail: {name?: string, weight?: number, inStock?: boolean} = { inStock: true };\n    \n    for (const line of lines) {\n      const trimmedLine = line.trim();\n      \n      // Extract product names from various formats\n      if (trimmedLine.includes('ADD TO CART')) {\n        // Try different name extraction patterns\n        let nameMatch = trimmedLine.match(/\\[([^\\]]+)\\]/);\n        if (!nameMatch) {\n          nameMatch = trimmedLine.match(/\"([^\"]+)\"/);\n        }\n        if (!nameMatch && trimmedLine.includes('22K')) {\n          nameMatch = trimmedLine.match(/([\\w\\s]+22K?)/);\n        }\n        \n        if (nameMatch) {\n          const name = nameMatch[1].replace(/\\\\n.*/, '').trim();\n          if (name && name !== 'product grid tile image') {\n            currentDetail.name = name;\n          }\n        }\n      }\n      \n      // Extract weights\n      const weightMatch = trimmedLine.match(/(\\d+\\.?\\d*)\\s*gm/);\n      if (weightMatch) {\n        currentDetail.weight = parseFloat(weightMatch[1]);\n      }\n      \n      // Check stock status\n      if (trimmedLine.includes('Out of Stock')) {\n        currentDetail.inStock = false;\n      }\n      \n      // When we have some product info, save it and reset\n      if ((currentDetail.name || currentDetail.weight) && \n          (trimmedLine.includes('ADD TO CART') || trimmedLine.includes('Out of Stock'))) {\n        details.push({ ...currentDetail });\n        currentDetail = { inStock: true };\n      }\n    }\n    \n    return details;\n  }\n\n  private generateProductName(categoryKey: string, index: number): string {\n    const categoryNames = {\n      'turkey-necklace': 'Turkey Necklace',\n      'mohan-mala': 'Mohan Mala',\n      'thushi-har-22k': 'Thushi Har 22K',\n      'make-on-order': 'Custom Design',\n      'antique-poth-22k': 'Antique Poth 22K',\n      'gents-kada': 'Gents Kada',\n      'yellow-bangles-22k': 'Yellow Bangle 22K',\n      'temple-bangle-22k': 'Temple Bangle 22K',\n      'antique-bangles': 'Antique Bangle',\n      'nmj-antique-22k': 'NMJ Antique 22K'\n    };\n    \n    const baseName = categoryNames[categoryKey as keyof typeof categoryNames] || 'Gold Jewelry';\n    return `${baseName} - Design ${index}`;\n  }\n\n  private generateWeight(category: string): number {\n    // Generate realistic weights based on jewelry type\n    const weightRanges = {\n      'necklaces': [15, 45],\n      'bangles': [8, 25],\n      'bracelets': [12, 35],\n      'antique': [20, 60],\n      'custom': [10, 50]\n    };\n    \n    const range = weightRanges[category as keyof typeof weightRanges] || [10, 30];\n    return Math.floor(Math.random() * (range[1] - range[0])) + range[0];\n  }\n\n  convertToInsertProducts(mamdeProducts: MamdeProductData[]): InsertProduct[] {\n    return mamdeProducts.map(product => ({\n      name: product.name,\n      description: `Authentic ${product.name} from Mamde Jewellers catalog collection. Handcrafted with traditional techniques.`,\n      category: product.category,\n      subcategory: this.getSubcategory(product.category, product.name),\n      weight: product.weight?.toString() || \"20.0\",\n      purity: product.material === 'gold' ? '22K Gold' : '22K Gold',\n      material: product.material,\n      imageUrl: product.imageUrl,\n      featured: Math.random() > 0.8 ? 1 : 0, // 20% chance to be featured\n      region: this.getRegion(product.name),\n      pricePerGram: \"6250.00\"\n    }));\n  }\n\n  private getSubcategory(category: string, name: string): string {\n    const nameLower = name.toLowerCase();\n    \n    if (category === 'necklaces') {\n      if (nameLower.includes('temple')) return 'temple';\n      if (nameLower.includes('antique')) return 'antique';\n      if (nameLower.includes('thushi')) return 'thushi';\n      if (nameLower.includes('turkey')) return 'traditional';\n      return 'traditional';\n    }\n    \n    if (category === 'bangles') {\n      if (nameLower.includes('temple')) return 'temple';\n      if (nameLower.includes('antique')) return 'antique';\n      if (nameLower.includes('yellow')) return 'plain';\n      return 'traditional';\n    }\n    \n    if (category === 'bracelets') {\n      if (nameLower.includes('kada')) return 'kada';\n      return 'traditional';\n    }\n    \n    return 'traditional';\n  }\n\n  private getRegion(name: string): string | undefined {\n    const nameLower = name.toLowerCase();\n    if (nameLower.includes('temple') || nameLower.includes('thushi')) {\n      return 'South Indian';\n    }\n    if (nameLower.includes('antique')) {\n      return 'Traditional Indian';\n    }\n    return undefined;\n  }\n}\n\nexport const mamdeCatalogImporter = new MamdeCatalogImporter();","size_bytes":8057},"server/storage/mongoStorage.ts":{"content":"import { nanoid } from 'nanoid';\n\n// For development, we'll use in-memory storage with MongoDB-like interface\n// In production, you would uncomment these and set up proper MongoDB\n// import User from '../models/User';  \n// import Product from '../models/Product';\n// import Rate from '../models/Rate';\n\nimport { User as IUser, Product as IProduct, Rate as IRate, CreateUser, CreateProduct, CreateRate } from '@shared/mongoSchema';\n\n// In-memory storage for development\nconst users: IUser[] = [];\nconst products: IProduct[] = [];\nconst rates: IRate[] = [];\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<IUser | null>;\n  getUserByUsername(username: string): Promise<IUser | null>;\n  createUser(userData: any): Promise<IUser>;\n  authenticateUser(username: string, password: string): Promise<IUser | null>;\n  updateUser(id: string, userData: Partial<IUser>): Promise<IUser | null>;\n  \n  // Product operations\n  getProducts(): Promise<IProduct[]>;\n  getProduct(id: string): Promise<IProduct | null>;\n  getProductsByCategory(category: string): Promise<IProduct[]>;\n  getFeaturedProducts(): Promise<IProduct[]>;\n  createProduct(productData: any): Promise<IProduct>;\n  updateProduct(id: string, productData: any): Promise<IProduct | null>;\n  deleteProduct(id: string): Promise<boolean>;\n  importCatalogProducts(products: any[]): Promise<IProduct[]>;\n  \n  // Rate operations\n  getRates(): Promise<IRate[]>;\n  updateRate(rateData: any): Promise<IRate>;\n}\n\nexport class MongoStorage implements IStorage {\n  constructor() {\n    // Don't initialize data in constructor to avoid timing issues\n    setTimeout(() => this.initializeData(), 2000);\n  }\n\n  private async initializeData() {\n    try {\n      // Initialize with sample data if needed\n      const products = await this.getProducts();\n      if (products.length === 0) {\n        console.log(\"Importing authentic Mamdej Jewellers catalog data...\");\n        await this.importCatalogProducts(this.getAuthenticMamdejProducts());\n        console.log(\"Catalog data imported successfully\");\n      }\n      \n      // Initialize rates\n      const rates = await this.getRates();\n      if (rates.length === 0) {\n        await this.updateRate({\n          material: \"gold\",\n          rate: \"6250\",\n          change: \"0\",\n          updatedAt: new Date().toISOString()\n        });\n        await this.updateRate({\n          material: \"silver\",\n          rate: \"75\",\n          change: \"0\",\n          updatedAt: new Date().toISOString()\n        });\n        console.log(\"Initial rates set\");\n      }\n    } catch (error) {\n      console.log(\"Data initialization will happen when database is ready\");\n    }\n  }\n\n  // User operations (using in-memory storage for development)\n  async getUser(id: string): Promise<IUser | null> {\n    return users.find(u => u.id === id) || null;\n  }\n\n  async getUserByUsername(username: string): Promise<IUser | null> {\n    return users.find(u => u.username === username) || null;\n  }\n\n  async authenticateUser(username: string, password: string): Promise<IUser | null> {\n    const user = users.find(u => u.username === username);\n    if (user && user.password === password) {\n      return user;\n    }\n    return null;\n  }\n\n  async createUser(userData: any): Promise<IUser> {\n    const user: IUser = {\n      ...userData,\n      id: nanoid(),\n      username: userData.username,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    users.push(user);\n    return user;\n  }\n\n  async updateUser(id: string, userData: Partial<IUser>): Promise<IUser | null> {\n    const userIndex = users.findIndex(u => u.id === id);\n    if (userIndex !== -1) {\n      users[userIndex] = { ...users[userIndex], ...userData, updatedAt: new Date() };\n      return users[userIndex];\n    }\n    return null;\n  }\n\n  // Product operations (using in-memory storage for development)  \n  async getProducts(): Promise<IProduct[]> {\n    return products;\n  }\n\n  async getProduct(id: string): Promise<IProduct | null> {\n    return products.find(p => p.id === id) || null;\n  }\n\n  async getProductsByCategory(category: string): Promise<IProduct[]> {\n    return products.filter(p => p.category === category);\n  }\n\n  async getFeaturedProducts(): Promise<IProduct[]> {\n    return products.filter(p => p.featured === 1);\n  }\n\n  async createProduct(productData: any): Promise<IProduct> {\n    const product: IProduct = {\n      ...productData,\n      id: nanoid(),\n      images: productData.imageUrl ? [productData.imageUrl] : [],\n      material: productData.material || 'gold',\n      featured: productData.featured || 0,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    products.push(product);\n    return product;\n  }\n\n  async updateProduct(id: string, productData: any): Promise<IProduct | null> {\n    const productIndex = products.findIndex(p => p.id === id);\n    if (productIndex !== -1) {\n      products[productIndex] = { ...products[productIndex], ...productData, updatedAt: new Date() };\n      return products[productIndex];\n    }\n    return null;\n  }\n\n  async deleteProduct(id: string): Promise<boolean> {\n    const productIndex = products.findIndex(p => p.id === id);\n    if (productIndex !== -1) {\n      products.splice(productIndex, 1);\n      return true;\n    }\n    return false;\n  }\n\n  async importCatalogProducts(productsList: any[]): Promise<IProduct[]> {\n    const results = [];\n    for (const productData of productsList) {\n      const product = await this.createProduct(productData);\n      results.push(product);\n    }\n    return results;\n  }\n\n  // Rate operations (using in-memory storage for development)\n  async getRates(): Promise<IRate[]> {\n    return rates;\n  }\n\n  async updateRate(rateData: any): Promise<IRate> {\n    const existingIndex = rates.findIndex(r => r.material === rateData.material);\n    if (existingIndex !== -1) {\n      rates[existingIndex] = { ...rateData };\n      return rates[existingIndex];\n    } else {\n      const newRate: IRate = { ...rateData };\n      rates.push(newRate);\n      return newRate;\n    }\n  }\n\n  private getAuthenticMamdejProducts() {\n    return [\n      {\n        name: \"Patti Long Poth 22K\",\n        description: \"Traditional long patta poth chain with intricate design - authentic Mamdej Jewellers design (78 items in collection)\",\n        category: \"patta-poth\",\n        subcategory: \"long\",\n        weight: \"26.33\",\n        purity: \"22K Gold\",\n        material: \"gold\",\n        imageUrl: \"https://cdn.quicksell.co/-NC585SUXWbKdscLOlSO/products_400/-OUANr2XivMO9ndCXNbm.jpg\",\n        featured: 1,\n        pricePerGram: \"6250.00\",\n        stock: 1\n      },\n      {\n        name: \"Patti Short Poth 22K\",\n        description: \"Elegant short patta poth design for daily wear - authentic Mamdej Jewellers design (67 items in collection)\",\n        category: \"patta-poth\",\n        subcategory: \"short\",\n        weight: \"18.50\",\n        purity: \"22K Gold\",\n        material: \"gold\",\n        imageUrl: \"https://cdn.quicksell.co/-NC585SUXWbKdscLOlSO/products_400/-OV32_LA01WVd3tBQeGh.jpg\",\n        featured: 1,\n        pricePerGram: \"6250.00\",\n        stock: 1\n      },\n      {\n        name: \"Fancy Necklace 20K\",\n        description: \"Beautiful fancy design necklace in 20K gold - authentic Mamdej Jewellers design (60 items in collection)\",\n        category: \"necklace\",\n        subcategory: \"fancy-20k\",\n        weight: \"11.52\",\n        purity: \"20K Gold\",\n        material: \"gold\",\n        imageUrl: \"https://cdn.quicksell.co/-NC585SUXWbKdscLOlSO/products_400/-OWBDQnKvRuKIs0Etcej.jpg\",\n        featured: 1,\n        pricePerGram: \"5800.00\",\n        stock: 1\n      },\n      {\n        name: \"Temple Necklace 22K\",\n        description: \"Sacred temple design necklace - authentic Mamdej Jewellers design (26 items in collection)\",\n        category: \"necklace\",\n        subcategory: \"temple-22k\",\n        weight: \"40.00\",\n        purity: \"22K Gold\",\n        material: \"gold\",\n        imageUrl: \"https://cdn.quicksell.co/-NC585SUXWbKdscLOlSO/products_400/-OQbGrKDYWOMt4I1P3_D.jpg\",\n        featured: 1,\n        pricePerGram: \"6250.00\",\n        stock: 1\n      },\n      {\n        name: \"Fancy Necklace 22K\",\n        description: \"Luxurious fancy design in premium 22K gold - authentic Mamdej Jewellers design (31 items in collection)\",\n        category: \"necklace\",\n        subcategory: \"fancy-22k\",\n        weight: \"35.00\",\n        purity: \"22K Gold\",\n        material: \"gold\",\n        imageUrl: \"https://cdn.quicksell.co/-NC585SUXWbKdscLOlSO/products_400/-OUyR7FLxj9OG89qpI94.jpg\",\n        featured: 1,\n        pricePerGram: \"6250.00\",\n        stock: 1\n      },\n      {\n        name: \"Fancy Poth With Pendant 22K\",\n        description: \"Beautiful fancy poth with matching pendant - authentic Mamdej Jewellers design (29 items in collection)\",\n        category: \"fancy-poth\",\n        subcategory: \"with-pendant\",\n        weight: \"28.50\",\n        purity: \"22K Gold\",\n        material: \"gold\",\n        imageUrl: \"https://cdn.quicksell.co/-NC585SUXWbKdscLOlSO/products_400/-OPf3ddUzrqvAEstCTE7.jpg\",\n        featured: 1,\n        pricePerGram: \"6250.00\",\n        stock: 1\n      },\n      {\n        name: \"Cartier Poth 22K\",\n        description: \"Luxurious Cartier style poth design - authentic Mamdej Jewellers design (51 items in collection)\",\n        category: \"fancy-poth\",\n        subcategory: \"cartier\",\n        weight: \"24.00\",\n        purity: \"22K Gold\",\n        material: \"gold\",\n        imageUrl: \"https://cdn.quicksell.co/-NC585SUXWbKdscLOlSO/products_400/-OMb7WhA0ZOs6XLtn3sG.jpg\",\n        featured: 1,\n        pricePerGram: \"6250.00\",\n        stock: 1\n      },\n      {\n        name: \"Temple Choker 22K\",\n        description: \"Sacred temple design choker necklace - authentic Mamdej Jewellers design (11 items in collection)\",\n        category: \"choker\",\n        subcategory: \"temple\",\n        weight: \"42.00\",\n        purity: \"22K Gold\",\n        material: \"gold\",\n        imageUrl: \"https://cdn.quicksell.co/-NC585SUXWbKdscLOlSO/products_400/-OSTu3vTuwmExEYADJ5v.jpg\",\n        featured: 1,\n        pricePerGram: \"6250.00\",\n        stock: 1\n      }\n    ];\n  }\n}\n\nexport const mongoStorage = new MongoStorage();","size_bytes":10131},"client/src/components/CallButton.tsx":{"content":"import { Phone } from \"lucide-react\";\n\nexport default function CallButton() {\n  return (\n    <div className=\"fixed bottom-24 right-6 z-40\">\n      <a\n        href=\"tel:+919876543210\"\n        className=\"w-12 h-12 bg-green-500 rounded-full flex items-center justify-center shadow-xl hover:shadow-2xl transition-all duration-300 transform hover:scale-105\"\n        title=\"Call us now\"\n      >\n        <Phone className=\"w-5 h-5 text-white\" />\n      </a>\n    </div>\n  );\n}\n","size_bytes":466},"client/src/components/CatalogImporter.tsx":{"content":"import { useState } from 'react';\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { useToast } from '@/hooks/use-toast';\nimport { Download, Loader2 } from 'lucide-react';\n\ninterface CatalogImportResponse {\n  message: string;\n  imported: number;\n  products: any[];\n}\n\nexport function CatalogImporter() {\n  const [isImporting, setIsImporting] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const importMutation = useMutation({\n    mutationFn: async (): Promise<CatalogImportResponse> => {\n      const response = await fetch('/api/catalog/import', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        }\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to import catalog products');\n      }\n      \n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Catalog Imported Successfully\",\n        description: `Imported ${data.imported} products from Mamde Jewellers catalog`,\n      });\n      \n      // Invalidate and refetch products\n      queryClient.invalidateQueries({ queryKey: ['/api/products'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/products/featured'] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Import Failed\",\n        description: \"Failed to import products from catalog\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const handleImport = () => {\n    setIsImporting(true);\n    importMutation.mutate();\n  };\n\n  return (\n    <Card className=\"w-full max-w-md\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Download className=\"h-5 w-5\" />\n          Import Catalog Products\n        </CardTitle>\n        <CardDescription>\n          Import jewelry products from Mamde Jewellers catalog to expand your collection\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <Button \n          onClick={handleImport}\n          disabled={importMutation.isPending || isImporting}\n          className=\"w-full\"\n          variant=\"default\"\n        >\n          {importMutation.isPending || isImporting ? (\n            <>\n              <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n              Importing...\n            </>\n          ) : (\n            <>\n              <Download className=\"mr-2 h-4 w-4\" />\n              Import Products\n            </>\n          )}\n        </Button>\n        {importMutation.isError && (\n          <p className=\"text-sm text-red-600 mt-2\">\n            Import failed. Please try again.\n          </p>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":2817},"client/src/components/CategoriesSection.tsx":{"content":"import { Link } from \"wouter\";\n\nexport default function CategoriesSection() {\n  // 8 distinct collections based on our authentic Mamdej Jewellers catalog\n  const collections = [\n    {\n      name: \"Patta Long Poth 22K\",\n      path: \"/category/patta-poth/long\",\n      description: \"Traditional long patta poth chains\",\n      count: \"Authentic Designs\",\n      image: \"https://cdn.quicksell.co/-NC585SUXWbKdscLOlSO/products_400/-OUANr2XivMO9ndCXNbm.jpg\"\n    },\n    {\n      name: \"Patta Short Poth 22K\", \n      path: \"/category/patta-poth/short\",\n      description: \"Elegant short patta poth for daily wear\",\n      count: \"Authentic Designs\",\n      image: \"https://cdn.quicksell.co/-NC585SUXWbKdscLOlSO/products_400/-OV32_LA01WVd3tBQeGh.jpg\"\n    },\n    {\n      name: \"Fancy Necklace 20K\",\n      path: \"/category/necklace/fancy-20k\", \n      description: \"Beautiful fancy designs in 20K gold\",\n      count: \"Authentic Designs\",\n      image: \"https://cdn.quicksell.co/-NC585SUXWbKdscLOlSO/products_400/-OWBDQnKvRuKIs0Etcej.jpg\"\n    },\n    {\n      name: \"Temple Necklace 22K\",\n      path: \"/category/necklace/temple-22k\",\n      description: \"Sacred temple design necklaces\", \n      count: \"Authentic Designs\",\n      image: \"https://cdn.quicksell.co/-NC585SUXWbKdscLOlSO/products_400/-OQbGrKDYWOMt4I1P3_D.jpg\"\n    },\n    {\n      name: \"Fancy Necklace 22K\",\n      path: \"/category/necklace/fancy-22k\",\n      description: \"Luxurious fancy designs in 22K gold\",\n      count: \"Authentic Designs\", \n      image: \"https://cdn.quicksell.co/-NC585SUXWbKdscLOlSO/products_400/-OUyR7FLxj9OG89qpI94.jpg\"\n    },\n    {\n      name: \"Fancy Poth With Pendant\",\n      path: \"/category/fancy-poth/with-pendant\",\n      description: \"Beautiful fancy poth with matching pendant\",\n      count: \"Authentic Designs\",\n      image: \"https://cdn.quicksell.co/-NC585SUXWbKdscLOlSO/products_400/-OPf3ddUzrqvAEstCTE7.jpg\"\n    },\n    {\n      name: \"Cartier Poth 22K\",\n      path: \"/category/fancy-poth/cartier\", \n      description: \"Luxurious Cartier style poth design\",\n      count: \"Authentic Designs\",\n      image: \"https://cdn.quicksell.co/-NC585SUXWbKdscLOlSO/products_400/-OMb7WhA0ZOs6XLtn3sG.jpg\"\n    },\n    {\n      name: \"Temple Choker 22K\",\n      path: \"/category/choker/temple\",\n      description: \"Sacred temple design choker necklace\", \n      count: \"Authentic Designs\",\n      image: \"https://cdn.quicksell.co/-NC585SUXWbKdscLOlSO/products_400/-OSTu3vTuwmExEYADJ5v.jpg\"\n    }\n  ];\n\n  return (\n    <section className=\"py-16 bg-white\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"text-center mb-12\">\n          <h3 className=\"font-playfair text-4xl font-bold text-navy mb-4\">Our Collections</h3>\n          <p className=\"text-gray-600 text-lg max-w-2xl mx-auto\">\n            Explore our carefully curated categories, each featuring unique designs crafted with precision and love.\n          </p>\n        </div>\n\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          {collections.map((collection) => (\n            <Link key={collection.path} href={collection.path}>\n              <div className=\"group cursor-pointer\">\n                <div className=\"relative overflow-hidden rounded-2xl shadow-lg group-hover:shadow-2xl transition-all duration-300\">\n                  <img\n                    src={collection.image}\n                    alt={`${collection.name} Collection`}\n                    className=\"w-full h-48 object-cover group-hover:scale-105 transition-transform duration-300\"\n                    onError={(e) => {\n                      const img = e.target as HTMLImageElement;\n                      img.src = 'https://images.unsplash.com/photo-1515562141207-7a88fb7ce338?w=400&h=300&fit=crop&crop=center';\n                    }}\n                  />\n                  <div className=\"absolute inset-0 bg-black bg-opacity-40 group-hover:bg-opacity-30 transition-all duration-300\"></div>\n                  <div className=\"absolute bottom-4 left-4 text-white\">\n                    <h4 className=\"font-playfair text-lg font-bold mb-1\">{collection.name}</h4>\n                    <p className=\"text-xs opacity-90\">{collection.description}</p>\n                    <span className=\"inline-block mt-1 text-xs bg-gold px-2 py-1 rounded-full\">\n                      {collection.count}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </Link>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":4483},"client/src/components/ChatWidget.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { MessageCircle, X, Send } from \"lucide-react\";\n\ninterface Message {\n  id: string;\n  text: string;\n  sender: \"user\" | \"agent\";\n  timestamp: Date;\n}\n\nexport default function ChatWidget() {\n  const [isOpen, setIsOpen] = useState(false);\n  const [messages, setMessages] = useState<Message[]>([\n    {\n      id: \"1\",\n      text: \"Hello! How can I help you today?\",\n      sender: \"agent\",\n      timestamp: new Date()\n    }\n  ]);\n  const [inputText, setInputText] = useState(\"\");\n\n  const sendMessage = () => {\n    if (!inputText.trim()) return;\n\n    const newMessage: Message = {\n      id: Date.now().toString(),\n      text: inputText,\n      sender: \"user\",\n      timestamp: new Date()\n    };\n\n    setMessages(prev => [...prev, newMessage]);\n    setInputText(\"\");\n\n    // Simulate agent response\n    setTimeout(() => {\n      const agentResponse: Message = {\n        id: (Date.now() + 1).toString(),\n        text: \"Thank you for your message! Our jewelry experts will assist you shortly. In the meantime, feel free to browse our collections or call us directly at +91 98765 43210.\",\n        sender: \"agent\",\n        timestamp: new Date()\n      };\n      setMessages(prev => [...prev, agentResponse]);\n    }, 1000);\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\") {\n      sendMessage();\n    }\n  };\n\n  return (\n    <div className=\"fixed bottom-6 right-6 z-50\">\n      <div className=\"relative\">\n        {/* Chat Button */}\n        <Button\n          onClick={() => setIsOpen(!isOpen)}\n          className=\"gold-gradient w-14 h-14 rounded-full flex items-center justify-center shadow-2xl hover:shadow-3xl transition-all duration-300 transform hover:scale-105\"\n        >\n          {isOpen ? <X className=\"text-white text-xl\" /> : <MessageCircle className=\"text-white text-xl\" />}\n          {!isOpen && (\n            <div className=\"absolute -top-2 -right-2 w-6 h-6 bg-red-500 rounded-full flex items-center justify-center\">\n              <span className=\"text-white text-xs font-bold\">1</span>\n            </div>\n          )}\n        </Button>\n\n        {/* Chat Widget */}\n        {isOpen && (\n          <div className=\"absolute bottom-16 right-0 w-80 bg-white rounded-2xl shadow-2xl border border-gray-200 transform transition-all duration-300\">\n            {/* Chat Header */}\n            <div className=\"gold-gradient p-4 rounded-t-2xl text-white\">\n              <div className=\"flex justify-between items-center\">\n                <div>\n                  <h5 className=\"font-semibold\">Live Chat</h5>\n                  <p className=\"text-xs opacity-90\">We're here to help!</p>\n                </div>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => setIsOpen(false)}\n                  className=\"text-white hover:text-gray-200 p-1\"\n                >\n                  <X className=\"w-4 h-4\" />\n                </Button>\n              </div>\n            </div>\n\n            {/* Chat Messages */}\n            <div className=\"h-64 p-4 overflow-y-auto\">\n              <div className=\"space-y-3\">\n                {messages.map((message) => (\n                  <div key={message.id} className={`flex ${message.sender === \"user\" ? \"justify-end\" : \"items-start space-x-2\"}`}>\n                    {message.sender === \"agent\" && (\n                      <div className=\"w-8 h-8 bg-gold bg-opacity-20 rounded-full flex items-center justify-center flex-shrink-0\">\n                        <i className=\"fas fa-user-headset text-gold text-xs\"></i>\n                      </div>\n                    )}\n                    <div className={`rounded-lg p-3 max-w-xs ${\n                      message.sender === \"user\" \n                        ? \"bg-gold text-white ml-8\" \n                        : \"bg-gray-100 text-gray-800\"\n                    }`}>\n                      <p className=\"text-sm\">{message.text}</p>\n                      <span className=\"text-xs opacity-70\">\n                        {message.timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}\n                      </span>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            {/* Chat Input */}\n            <div className=\"p-4 border-t border-gray-200\">\n              <div className=\"flex space-x-2\">\n                <Input\n                  type=\"text\"\n                  placeholder=\"Type your message...\"\n                  value={inputText}\n                  onChange={(e) => setInputText(e.target.value)}\n                  onKeyPress={handleKeyPress}\n                  className=\"flex-1 text-sm focus:border-gold\"\n                />\n                <Button\n                  onClick={sendMessage}\n                  className=\"gold-gradient text-white w-10 h-10 p-0 hover:shadow-lg transition-all duration-300\"\n                >\n                  <Send className=\"w-4 h-4\" />\n                </Button>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":5178},"client/src/components/ContactSection.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { MapPin, Phone, Clock, Mail } from \"lucide-react\";\n\nexport default function ContactSection() {\n  return (\n    <section className=\"py-16 bg-gray-100\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"text-center mb-12\">\n          <h3 className=\"font-playfair text-4xl font-bold text-navy mb-4\">Visit Our Store</h3>\n          <p className=\"text-gray-600 text-lg max-w-2xl mx-auto\">\n            Experience our collection in person and get expert guidance from our knowledgeable staff.\n          </p>\n        </div>\n\n        <div className=\"grid lg:grid-cols-2 gap-12 items-center\">\n          <div>\n            <div className=\"bg-white rounded-2xl p-8 shadow-lg\">\n              <h4 className=\"font-playfair text-2xl font-bold text-navy mb-6\">Get in Touch</h4>\n              \n              <div className=\"space-y-6\">\n                <div className=\"flex items-start space-x-4\">\n                  <div className=\"w-12 h-12 bg-gold bg-opacity-10 rounded-lg flex items-center justify-center flex-shrink-0\">\n                    <MapPin className=\"text-gold text-lg\" />\n                  </div>\n                  <div>\n                    <h5 className=\"font-semibold text-navy mb-1\">Address</h5>\n                    <p className=\"text-gray-600\">123 Market Street, Jewelry District<br />Mumbai, Maharashtra 400001</p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-start space-x-4\">\n                  <div className=\"w-12 h-12 bg-gold bg-opacity-10 rounded-lg flex items-center justify-center flex-shrink-0\">\n                    <Phone className=\"text-gold text-lg\" />\n                  </div>\n                  <div>\n                    <h5 className=\"font-semibold text-navy mb-1\">Phone</h5>\n                    <p className=\"text-gray-600\">+91 98765 43210<br />+91 98765 43211</p>\n                    <a \n                      href=\"tel:+919876543210\"\n                      className=\"text-gold hover:text-yellow-600 text-sm font-medium mt-1 inline-flex items-center\"\n                    >\n                      <Phone className=\"w-3 h-3 mr-1\" />\n                      Click to Call\n                    </a>\n                  </div>\n                </div>\n\n                <div className=\"flex items-start space-x-4\">\n                  <div className=\"w-12 h-12 bg-gold bg-opacity-10 rounded-lg flex items-center justify-center flex-shrink-0\">\n                    <Clock className=\"text-gold text-lg\" />\n                  </div>\n                  <div>\n                    <h5 className=\"font-semibold text-navy mb-1\">Business Hours</h5>\n                    <p className=\"text-gray-600\">Monday - Saturday: 10:00 AM - 8:00 PM<br />Sunday: 11:00 AM - 6:00 PM</p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-start space-x-4\">\n                  <div className=\"w-12 h-12 bg-gold bg-opacity-10 rounded-lg flex items-center justify-center flex-shrink-0\">\n                    <Mail className=\"text-gold text-lg\" />\n                  </div>\n                  <div>\n                    <h5 className=\"font-semibold text-navy mb-1\">Email</h5>\n                    <p className=\"text-gray-600\">info@shreejewellers.com</p>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"mt-8 pt-6 border-t border-gray-200\">\n                <div className=\"flex space-x-4\">\n                  <a href=\"#\" className=\"w-10 h-10 bg-gold bg-opacity-10 rounded-lg flex items-center justify-center text-gold hover:bg-gold hover:text-white transition-all duration-300\">\n                    <i className=\"fab fa-facebook-f\"></i>\n                  </a>\n                  <a href=\"#\" className=\"w-10 h-10 bg-gold bg-opacity-10 rounded-lg flex items-center justify-center text-gold hover:bg-gold hover:text-white transition-all duration-300\">\n                    <i className=\"fab fa-instagram\"></i>\n                  </a>\n                  <a href=\"#\" className=\"w-10 h-10 bg-gold bg-opacity-10 rounded-lg flex items-center justify-center text-gold hover:bg-gold hover:text-white transition-all duration-300\">\n                    <i className=\"fab fa-whatsapp\"></i>\n                  </a>\n                  <a href=\"#\" className=\"w-10 h-10 bg-gold bg-opacity-10 rounded-lg flex items-center justify-center text-gold hover:bg-gold hover:text-white transition-all duration-300\">\n                    <i className=\"fab fa-youtube\"></i>\n                  </a>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div>\n            <div className=\"bg-white rounded-2xl overflow-hidden shadow-lg\">\n              <div className=\"h-96 bg-gradient-to-br from-gray-200 to-gray-300 flex items-center justify-center\">\n                <div className=\"text-center\">\n                  <MapPin className=\"w-12 h-12 text-gray-400 mb-4 mx-auto\" />\n                  <p className=\"text-gray-600 font-semibold\">Interactive Map</p>\n                  <p className=\"text-sm text-gray-500\">Google Maps Integration</p>\n                </div>\n              </div>\n              <div className=\"p-6\">\n                <div className=\"flex justify-between items-center\">\n                  <div>\n                    <h5 className=\"font-semibold text-navy\">Shree Jewellers</h5>\n                    <p className=\"text-gray-600 text-sm\">Jewelry District, Mumbai</p>\n                  </div>\n                  <Button className=\"gold-gradient text-white px-4 py-2 rounded-lg text-sm font-medium\">\n                    Get Directions\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":5770},"client/src/components/FeaturedProducts.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Product } from \"@shared/schema\";\nimport ProductCard from \"./ProductCard\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function FeaturedProducts() {\n  const { data: products, isLoading } = useQuery<Product[]>({\n    queryKey: [\"/api/products/featured\"],\n  });\n\n  return (\n    <section className=\"py-16 bg-gray-50\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"text-center mb-12\">\n          <h3 className=\"font-playfair text-4xl font-bold text-navy mb-4\">Featured Pieces</h3>\n          <p className=\"text-gray-600 text-lg max-w-2xl mx-auto\">\n            Handpicked selections from our master craftsmen, featuring the finest materials and exceptional artistry.\n          </p>\n        </div>\n\n        {isLoading ? (\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-8\">\n            {Array.from({ length: 4 }).map((_, i) => (\n              <div key={i} className=\"bg-white rounded-2xl shadow-lg overflow-hidden\">\n                <Skeleton className=\"w-full h-64\" />\n                <div className=\"p-6 space-y-3\">\n                  <Skeleton className=\"h-6 w-3/4\" />\n                  <Skeleton className=\"h-4 w-full\" />\n                  <Skeleton className=\"h-8 w-1/2\" />\n                  <Skeleton className=\"h-10 w-full\" />\n                </div>\n              </div>\n            ))}\n          </div>\n        ) : products?.length ? (\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-8\">\n            {products.map((product) => (\n              <ProductCard key={product.id} product={product} />\n            ))}\n          </div>\n        ) : (\n          <div className=\"text-center py-16\">\n            <div className=\"w-16 h-16 bg-gray-200 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <i className=\"fas fa-gem text-2xl text-gray-400\"></i>\n            </div>\n            <h3 className=\"text-xl font-semibold text-navy mb-2\">No featured products available</h3>\n            <p className=\"text-gray-600\">We're currently updating our featured collection. Please check back soon!</p>\n          </div>\n        )}\n\n        {products?.length && (\n          <div className=\"text-center mt-12\">\n            <Button \n              variant=\"outline\" \n              className=\"border-2 border-navy text-navy px-8 py-3 rounded-lg font-semibold hover:bg-navy hover:text-white transition-all duration-300\"\n            >\n              View All Products\n            </Button>\n          </div>\n        )}\n      </div>\n    </section>\n  );\n}\n","size_bytes":2635},"client/src/components/Footer.tsx":{"content":"import { Link } from \"wouter\";\n\nexport default function Footer() {\n  const collections = [\n    { name: \"Patta Poth 22K\", path: \"/category/patta-poth\", key: \"patta-poth\" },\n    { name: \"Necklaces 20K\", path: \"/category/necklace?filter=20k\", key: \"necklace-20k\" },\n    { name: \"Necklaces 22K\", path: \"/category/necklace?filter=22k\", key: \"necklace-22k\" },\n    { name: \"Fancy Poth 22K\", path: \"/category/fancy-poth\", key: \"fancy-poth\" },\n    { name: \"Chokers 22K\", path: \"/category/choker\", key: \"choker\" },\n    { name: \"View All Products\", path: \"/products\", key: \"all-products\" },\n  ];\n\n  return (\n    <footer className=\"bg-navy text-white py-12\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-8\">\n          <div>\n            <h4 className=\"font-playfair text-2xl font-bold mb-4\">\n              <i className=\"fas fa-gem text-gold mr-2\"></i>\n              Shree Jewellers\n            </h4>\n            <p className=\"text-gray-300 mb-4 leading-relaxed\">\n              Crafting timeless jewelry with passion and precision for over 25 years. Your trusted partner for life's precious moments.\n            </p>\n            <div className=\"flex space-x-3\">\n              <a href=\"#\" className=\"w-10 h-10 bg-gold bg-opacity-20 rounded-lg flex items-center justify-center text-gold hover:bg-gold hover:text-white transition-all duration-300\">\n                <i className=\"fab fa-facebook-f\"></i>\n              </a>\n              <a href=\"#\" className=\"w-10 h-10 bg-gold bg-opacity-20 rounded-lg flex items-center justify-center text-gold hover:bg-gold hover:text-white transition-all duration-300\">\n                <i className=\"fab fa-instagram\"></i>\n              </a>\n              <a href=\"#\" className=\"w-10 h-10 bg-gold bg-opacity-20 rounded-lg flex items-center justify-center text-gold hover:bg-gold hover:text-white transition-all duration-300\">\n                <i className=\"fab fa-whatsapp\"></i>\n              </a>\n            </div>\n          </div>\n\n          <div>\n            <h5 className=\"font-semibold text-lg mb-4\">Collections</h5>\n            <ul className=\"space-y-2\">\n              {collections.map((collection) => (\n                <li key={collection.key}>\n                  <Link href={collection.path}>\n                    <button className=\"text-gray-300 hover:text-gold transition-colors text-left\">\n                      {collection.name}\n                    </button>\n                  </Link>\n                </li>\n              ))}\n            </ul>\n          </div>\n\n          <div>\n            <h5 className=\"font-semibold text-lg mb-4\">Services</h5>\n            <ul className=\"space-y-2\">\n              <li><a href=\"#\" className=\"text-gray-300 hover:text-gold transition-colors flex items-center\"><i className=\"fas fa-tools mr-2\"></i>Custom Jewelry</a></li>\n              <li><a href=\"#\" className=\"text-gray-300 hover:text-gold transition-colors flex items-center\"><i className=\"fas fa-wrench mr-2\"></i>Repair Services</a></li>\n              <li><a href=\"#\" className=\"text-gray-300 hover:text-gold transition-colors flex items-center\"><i className=\"fas fa-certificate mr-2\"></i>Jewelry Appraisal</a></li>\n              <li><a href=\"#\" className=\"text-gray-300 hover:text-gold transition-colors flex items-center\"><i className=\"fas fa-exchange-alt mr-2\"></i>Gold Exchange</a></li>\n              <li><a href=\"#\" className=\"text-gray-300 hover:text-gold transition-colors flex items-center\"><i className=\"fas fa-sparkles mr-2\"></i>Cleaning Services</a></li>\n              <li><a href=\"#\" className=\"text-gray-300 hover:text-gold transition-colors flex items-center\"><i className=\"fas fa-comments mr-2\"></i>Consultation</a></li>\n            </ul>\n          </div>\n\n          <div>\n            <h5 className=\"font-semibold text-lg mb-4\">Quick Links</h5>\n            <ul className=\"space-y-2\">\n              <li><a href=\"/admin\" className=\"text-gray-300 hover:text-gold transition-colors flex items-center\"><i className=\"fas fa-user-shield mr-2\"></i>Admin Panel</a></li>\n              <li><a href=\"#\" className=\"text-gray-300 hover:text-gold transition-colors flex items-center\"><i className=\"fas fa-info-circle mr-2\"></i>About Us</a></li>\n              <li><a href=\"#\" className=\"text-gray-300 hover:text-gold transition-colors flex items-center\"><i className=\"fas fa-phone mr-2\"></i>Contact Us</a></li>\n              <li><a href=\"#\" className=\"text-gray-300 hover:text-gold transition-colors flex items-center\"><i className=\"fas fa-shield-alt mr-2\"></i>Privacy Policy</a></li>\n              <li><a href=\"#\" className=\"text-gray-300 hover:text-gold transition-colors flex items-center\"><i className=\"fas fa-file-contract mr-2\"></i>Terms of Service</a></li>\n              <li><a href=\"#\" className=\"text-gray-300 hover:text-gold transition-colors flex items-center\"><i className=\"fas fa-award mr-2\"></i>Warranty</a></li>\n            </ul>\n          </div>\n        </div>\n\n        <div className=\"border-t border-gray-700 mt-8 pt-8\">\n          <div className=\"flex flex-col md:flex-row justify-between items-center\">\n            <div className=\"text-gray-300 text-sm mb-4 md:mb-0\">\n              © 2024 Shree Jewellers. All rights reserved. | Designed with ❤️ for our valued customers.\n            </div>\n            <div className=\"flex items-center space-x-4 text-sm text-gray-300\">\n              <span>Certified by:</span>\n              <span className=\"bg-gold bg-opacity-20 px-3 py-1 rounded-full text-gold font-medium\">BIS Hallmark</span>\n              <span className=\"bg-silver bg-opacity-20 px-3 py-1 rounded-full text-silver font-medium\">GST Verified</span>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"grid md:grid-cols-3 gap-8 mt-8\">\n          <div className=\"text-center\">\n            <h5 className=\"font-semibold text-lg mb-4 text-gold\">Visit Our Store</h5>\n            <p className=\"text-gray-300 mb-2\">\n              <i className=\"fas fa-map-marker-alt mr-2\"></i>\n              123 Jewelry Street, Gold Market\n            </p>\n            <p className=\"text-gray-300 mb-2\">\n              <i className=\"fas fa-phone mr-2\"></i>\n              +91 98765 43210\n            </p>\n            <p className=\"text-gray-300\">\n              <i className=\"fas fa-clock mr-2\"></i>\n              Mon-Sat: 10 AM - 8 PM\n            </p>\n          </div>\n          \n          <div className=\"text-center\">\n            <h5 className=\"font-semibold text-lg mb-4 text-gold\">Book Appointment</h5>\n            <p className=\"text-gray-300 mb-4\">Schedule a personal consultation with our jewelry experts</p>\n            <button className=\"gold-gradient text-white px-6 py-2 rounded-lg hover:scale-105 transition-transform\">\n              <i className=\"fas fa-calendar-alt mr-2\"></i>\n              Book Now\n            </button>\n          </div>\n          \n          <div className=\"text-center\">\n            <h5 className=\"font-semibold text-lg mb-4 text-gold\">Explore Collection</h5>\n            <p className=\"text-gray-300 mb-4\">Browse our complete jewelry catalog with authentic Mamdej designs</p>\n            <Link href=\"/products\">\n              <button className=\"border border-gold text-gold px-6 py-2 rounded-lg hover:bg-gold hover:text-white transition-colors\">\n                <i className=\"fas fa-search mr-2\"></i>\n                View Catalog\n              </button>\n            </Link>\n          </div>\n        </div>\n\n        <div className=\"border-t border-gray-700 pt-6 mt-8 text-center text-gray-400\">\n          <p>&copy; 2024 Shree Jewellers. All rights reserved. | Authentic Mamdej Jewellers Collection</p>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":7687},"client/src/components/Header.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Sheet, SheetContent, SheetTrigger } from \"@/components/ui/sheet\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Search, Menu, MapPin, Clock, Phone, Mail, User, Settings, LogOut } from \"lucide-react\";\nimport { useLanguage } from \"@/contexts/LanguageContext\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport LanguageSelector from \"./LanguageSelector\";\nimport LoginForm from \"./LoginForm\";\nimport SignupForm from \"./SignupForm\";\n\nexport default function Header() {\n  const [location] = useLocation();\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [isAuthDialogOpen, setIsAuthDialogOpen] = useState(false);\n  const [authMode, setAuthMode] = useState<'login' | 'signup'>('login');\n  const { t } = useLanguage();\n  const { user, isAuthenticated, logout } = useAuth();\n\n  // Simplified collections menu\n  const collections = [\n    {\n      name: \"Patta Poth\",\n      items: [\n        { name: \"Long\", path: \"/category/patta-poth/long\" },\n        { name: \"Short\", path: \"/category/patta-poth/short\" }\n      ]\n    },\n    {\n      name: \"Necklaces\", \n      items: [\n        { name: \"Fancy 20K\", path: \"/category/necklace/fancy-20k\" },\n        { name: \"Temple 22K\", path: \"/category/necklace/temple-22k\" },\n        { name: \"Fancy 22K\", path: \"/category/necklace/fancy-22k\" },\n        { name: \"Classic 20K\", path: \"/category/necklace/classic-20k\" },\n        { name: \"Classic 22K\", path: \"/category/necklace/classic-22k\" },\n        { name: \"Arbi 20K\", path: \"/category/necklace/arbi-20k\" }\n      ]\n    },\n    {\n      name: \"Fancy Poth\",\n      items: [\n        { name: \"With Pendant\", path: \"/category/fancy-poth/with-pendant\" },\n        { name: \"Cartier\", path: \"/category/fancy-poth/cartier\" },\n        { name: \"Nano\", path: \"/category/fancy-poth/nano\" },\n        { name: \"Short\", path: \"/category/fancy-poth/short\" },\n        { name: \"Long\", path: \"/category/fancy-poth/long\" }\n      ]\n    },\n    {\n      name: \"Chokers\",\n      items: [\n        { name: \"Temple\", path: \"/category/choker/temple\" },\n        { name: \"Yellow\", path: \"/category/choker/yellow\" }\n      ]\n    }\n  ];\n\n  return (\n    <header className=\"bg-white shadow-lg sticky top-0 z-50\">\n      <div className=\"container mx-auto px-4\">\n        {/* Top bar with contact info */}\n        <div className=\"border-b border-gray-200 py-2\">\n          <div className=\"flex justify-between items-center text-sm\">\n            <div className=\"hidden md:flex space-x-4\">\n              <span className=\"flex items-center text-gray-600\">\n                <MapPin className=\"w-4 h-4 mr-2 text-gold\" />\n                123 Market Street, Mumbai, Maharashtra 400001\n              </span>\n              <span className=\"flex items-center text-gray-600\">\n                <Clock className=\"w-4 h-4 mr-2 text-gold\" />\n                Mon-Sat: 10AM-8PM\n              </span>\n            </div>\n            <div className=\"flex space-x-4\">\n              <a \n                href=\"tel:+919876543210\" \n                className=\"flex items-center text-gold hover:text-yellow-600 transition-colors\"\n              >\n                <Phone className=\"w-4 h-4 mr-2\" />\n                +91 98765 43210\n              </a>\n              <a \n                href=\"mailto:info@shreejewellers.com\" \n                className=\"hidden sm:flex items-center text-gold hover:text-yellow-600 transition-colors\"\n              >\n                <Mail className=\"w-4 h-4 mr-2\" />\n                info@shreejewellers.com\n              </a>\n            </div>\n          </div>\n        </div>\n\n        {/* Main navigation */}\n        <nav className=\"py-4\">\n          <div className=\"flex justify-between items-center\">\n            <Link href=\"/\">\n              <div className=\"flex items-center\">\n                <h1 className=\"font-playfair text-3xl font-bold text-navy\">\n                  <i className=\"fas fa-gem text-gold mr-2\"></i>\n                  {t('company.name')}\n                </h1>\n              </div>\n            </Link>\n\n            {/* Desktop Navigation */}\n            <div className=\"hidden md:flex space-x-8\">\n              <Link href=\"/\">\n                <Button \n                  variant=\"ghost\" \n                  className={`text-navy hover:text-gold transition-colors font-medium ${\n                    location === \"/\" ? \"text-gold\" : \"\"\n                  }`}\n                >\n                  {t('nav.home')}\n                </Button>\n              </Link>\n              \n              <div className=\"relative group\">\n                <Button variant=\"ghost\" className=\"text-navy hover:text-gold transition-colors font-medium\">\n                  {t('nav.collections')} <i className=\"fas fa-chevron-down ml-1\"></i>\n                </Button>\n                <div className=\"absolute top-full left-0 mt-2 w-80 bg-white shadow-xl rounded-lg py-2 opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200 z-50\">\n                  {collections.map((collection) => (\n                    <div key={collection.name} className=\"px-4 py-2\">\n                      <h4 className=\"font-semibold text-navy text-sm mb-2\">{collection.name}</h4>\n                      <div className=\"space-y-1\">\n                        {collection.items.map((item) => (\n                          <Link key={item.path} href={item.path}>\n                            <button \n                              className={`block w-full text-left px-2 py-1 text-sm text-gray-600 hover:bg-gold hover:text-white transition-colors rounded ${\n                                location === item.path ? \"bg-gold text-white\" : \"\"\n                              }`}\n                              onClick={() => setIsMenuOpen(false)}\n                            >\n                              {item.name}\n                            </button>\n                          </Link>\n                        ))}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </div>\n\n            {/* Search and Mobile Menu */}\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"relative hidden sm:block\">\n                <Input\n                  type=\"text\"\n                  placeholder={t('search.placeholder')}\n                  className=\"border border-gray-300 rounded-lg px-4 py-2 pr-10 focus:outline-none focus:border-gold\"\n                />\n                <Search className=\"w-4 h-4 absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400\" />\n              </div>\n              \n              <LanguageSelector />\n\n              {/* Authentication */}\n              {isAuthenticated ? (\n                <div className=\"flex items-center space-x-2\">\n                  <span className=\"hidden sm:inline text-sm text-navy\">\n                    Welcome, {user?.firstName || user?.email}\n                  </span>\n                  <div className=\"relative group\">\n                    <Button variant=\"ghost\" size=\"icon\" className=\"text-navy\">\n                      <User className=\"w-5 h-5\" />\n                    </Button>\n                    <div className=\"absolute top-full right-0 mt-2 w-48 bg-white shadow-xl rounded-lg py-2 opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200\">\n                      {user?.role === 'admin' && (\n                        <Link href=\"/admin\">\n                          <button className=\"flex items-center w-full text-left px-4 py-2 text-gray-700 hover:bg-gold hover:text-white transition-colors\">\n                            <Settings className=\"w-4 h-4 mr-2\" />\n                            Admin Panel\n                          </button>\n                        </Link>\n                      )}\n                      <button \n                        onClick={logout}\n                        className=\"flex items-center w-full text-left px-4 py-2 text-gray-700 hover:bg-gold hover:text-white transition-colors\"\n                      >\n                        <LogOut className=\"w-4 h-4 mr-2\" />\n                        Logout\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              ) : (\n                <Dialog open={isAuthDialogOpen} onOpenChange={setIsAuthDialogOpen}>\n                  <DialogTrigger asChild>\n                    <Button variant=\"outline\" className=\"text-navy border-navy hover:bg-navy hover:text-white\">\n                      <User className=\"w-4 h-4 mr-2\" />\n                      Login\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent className=\"sm:max-w-md\">\n                    <DialogHeader>\n                      <DialogTitle>\n                        {authMode === 'login' ? 'Login to Your Account' : 'Create Account'}\n                      </DialogTitle>\n                    </DialogHeader>\n                    {authMode === 'login' ? (\n                      <LoginForm \n                        onSuccess={() => setIsAuthDialogOpen(false)}\n                        onToggleMode={() => setAuthMode('signup')}\n                      />\n                    ) : (\n                      <SignupForm \n                        onSuccess={() => setIsAuthDialogOpen(false)}\n                        onToggleMode={() => setAuthMode('login')}\n                      />\n                    )}\n                  </DialogContent>\n                </Dialog>\n              )}\n              \n              {/* Mobile Menu */}\n              <Sheet open={isMenuOpen} onOpenChange={setIsMenuOpen}>\n                <SheetTrigger asChild>\n                  <Button variant=\"ghost\" size=\"icon\" className=\"md:hidden text-navy\">\n                    <Menu className=\"w-6 h-6\" />\n                  </Button>\n                </SheetTrigger>\n                <SheetContent side=\"right\" className=\"w-80\">\n                  <div className=\"flex flex-col space-y-4 mt-8\">\n                    <Link href=\"/\">\n                      <Button \n                        variant=\"ghost\" \n                        className=\"justify-start w-full\"\n                        onClick={() => setIsMenuOpen(false)}\n                      >\n                        Home\n                      </Button>\n                    </Link>\n                    \n                    <div className=\"space-y-2\">\n                      <h3 className=\"font-semibold text-navy mb-3\">Collections</h3>\n                      {collections.map((collection) => (\n                        <div key={collection.name} className=\"space-y-1\">\n                          <h4 className=\"font-medium text-navy text-sm px-2\">{collection.name}</h4>\n                          {collection.items.map((item) => (\n                            <Link key={item.path} href={item.path}>\n                              <Button \n                                variant=\"ghost\" \n                                className=\"justify-start w-full pl-6 text-sm\"\n                                onClick={() => setIsMenuOpen(false)}\n                              >\n                                {item.name}\n                              </Button>\n                            </Link>\n                          ))}\n                        </div>\n                      ))}\n                    </div>\n                    \n                    <div className=\"pt-4\">\n                      <Input\n                        type=\"text\"\n                        placeholder=\"Search products...\"\n                        className=\"w-full\"\n                      />\n                    </div>\n                  </div>\n                </SheetContent>\n              </Sheet>\n            </div>\n          </div>\n        </nav>\n      </div>\n    </header>\n  );\n}\n","size_bytes":11961},"client/src/components/HeroSection.tsx":{"content":"import { Button } from \"@/components/ui/button\";\n\nexport default function HeroSection() {\n  return (\n    <section className=\"relative hero-pattern py-20\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"grid lg:grid-cols-2 gap-12 items-center\">\n          <div className=\"text-center lg:text-left\">\n            <h2 className=\"font-playfair text-5xl lg:text-6xl font-bold text-navy mb-6 leading-tight\">\n              Timeless Elegance in{\" \"}\n              <span className=\"text-gold\">Gold</span> &{\" \"}\n              <span className=\"text-silver\">Silver</span>\n            </h2>\n            <p className=\"text-lg text-gray-600 mb-8 leading-relaxed\">\n              Discover our exquisite collection of handcrafted jewelry, where traditional artistry meets modern design. Each piece tells a story of heritage and luxury.\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-4\">\n              <Button className=\"gold-gradient text-white px-8 py-4 rounded-lg font-semibold hover:shadow-lg transition-all duration-300 transform hover:-translate-y-1\">\n                <i className=\"fas fa-eye mr-2\"></i>\n                Explore Collection\n              </Button>\n              <Button \n                variant=\"outline\" \n                className=\"border-2 border-navy text-navy px-8 py-4 rounded-lg font-semibold hover:bg-navy hover:text-white transition-all duration-300\"\n              >\n                <i className=\"fas fa-calendar-alt mr-2\"></i>\n                Book Appointment\n              </Button>\n            </div>\n          </div>\n          <div className=\"relative\">\n            <img\n              src=\"https://images.unsplash.com/photo-1515562141207-7a88fb7ce338?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=800&h=600\"\n              alt=\"Elegant gold jewelry collection\"\n              className=\"rounded-2xl shadow-2xl w-full h-auto transform rotate-3 hover:rotate-0 transition-transform duration-500\"\n            />\n            <div className=\"absolute -bottom-6 -left-6 bg-white p-6 rounded-xl shadow-lg\">\n              <div className=\"text-center\">\n                <span className=\"text-3xl font-bold text-gold\">500+</span>\n                <p className=\"text-sm text-gray-600\">Unique Designs</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":2402},"client/src/components/LanguageSelector.tsx":{"content":"import { Globe } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { useLanguage } from \"@/contexts/LanguageContext\";\n\nexport default function LanguageSelector() {\n  const { language, setLanguage } = useLanguage();\n\n  const languages = [\n    { code: 'en', name: 'English', nativeName: 'English' },\n    { code: 'hi', name: 'Hindi', nativeName: 'हिंदी' },\n    { code: 'mr', name: 'Marathi', nativeName: 'मराठी' },\n  ];\n\n  const currentLanguage = languages.find(lang => lang.code === language);\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button variant=\"ghost\" size=\"sm\" className=\"text-navy hover:text-gold\">\n          <Globe className=\"w-4 h-4 mr-2\" />\n          {currentLanguage?.nativeName}\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\">\n        {languages.map((lang) => (\n          <DropdownMenuItem\n            key={lang.code}\n            onClick={() => setLanguage(lang.code as any)}\n            className={language === lang.code ? \"bg-gold bg-opacity-10\" : \"\"}\n          >\n            <span className=\"font-medium\">{lang.nativeName}</span>\n            <span className=\"text-sm text-gray-500 ml-2\">({lang.name})</span>\n          </DropdownMenuItem>\n        ))}\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}","size_bytes":1471},"client/src/components/LoginForm.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardHeader, CardTitle, CardContent } from \"@/components/ui/card\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Eye, EyeOff } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface LoginFormProps {\n  onSuccess: () => void;\n  onToggleMode: () => void;\n}\n\nexport default function LoginForm({ onSuccess, onToggleMode }: LoginFormProps) {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [showPassword, setShowPassword] = useState(false);\n  const { toast } = useToast();\n\n  const loginMutation = useMutation({\n    mutationFn: async (credentials: { email: string; password: string }) => {\n      const response = await apiRequest(\"/api/auth/login\", {\n        method: \"POST\",\n        body: JSON.stringify(credentials),\n      });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      localStorage.setItem(\"token\", data.token);\n      onSuccess();\n      toast({\n        title: \"Login Successful\",\n        description: `Welcome back, ${data.user.firstName || data.user.email}!`,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Login Failed\",\n        description: error.message || \"Invalid credentials\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    loginMutation.mutate({ email, password });\n  };\n\n  return (\n    <Card className=\"w-full max-w-md mx-auto\">\n      <CardHeader>\n        <CardTitle className=\"text-center text-navy\">Login to Your Account</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"email\">Email</Label>\n            <Input\n              id=\"email\"\n              type=\"email\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              placeholder=\"Enter your email\"\n              required\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"password\">Password</Label>\n            <div className=\"relative\">\n              <Input\n                id=\"password\"\n                type={showPassword ? \"text\" : \"password\"}\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                placeholder=\"Enter your password\"\n                required\n              />\n              <Button\n                type=\"button\"\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"absolute right-2 top-1/2 transform -translate-y-1/2\"\n                onClick={() => setShowPassword(!showPassword)}\n              >\n                {showPassword ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n              </Button>\n            </div>\n          </div>\n\n          <Button\n            type=\"submit\"\n            className=\"w-full gold-gradient text-white\"\n            disabled={loginMutation.isPending}\n          >\n            {loginMutation.isPending ? \"Signing In...\" : \"Sign In\"}\n          </Button>\n\n          <div className=\"text-center\">\n            <button\n              type=\"button\"\n              onClick={onToggleMode}\n              className=\"text-sm text-gold hover:underline\"\n            >\n              Don't have an account? Sign up\n            </button>\n          </div>\n        </form>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":3661},"client/src/components/ProductCard.tsx":{"content":"import { Link } from \"wouter\";\nimport { Product } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Heart, ShoppingBag } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useLanguage } from \"@/contexts/LanguageContext\";\n\ninterface ProductCardProps {\n  product: Product;\n}\n\nexport default function ProductCard({ product }: ProductCardProps) {\n  const { t } = useLanguage();\n  \n  // Fetch real-time price for this product\n  const { data: priceData } = useQuery<{\n    productId: string;\n    weight: number;\n    purity: string;\n    material: string;\n    ratePerGram: string;\n    totalPrice: string;\n    updatedAt: string;\n  }>({\n    queryKey: [\"/api/products\", product.id, \"price\"],\n    refetchInterval: 60000, // Refetch every minute\n  });\n\n  const getBadgeColor = () => {\n    if (product.featured === 1) return \"bg-gold text-white\";\n    if (product.material === \"gold\") return \"bg-amber-100 text-amber-800\";\n    if (product.material === \"silver\") return \"bg-gray-100 text-gray-800\";\n    return \"bg-blue-100 text-blue-800\";\n  };\n\n  const getButtonClass = () => {\n    return product.material === \"gold\" ? \"gold-gradient\" : \"silver-gradient\";\n  };\n\n  return (\n    <div className=\"bg-white rounded-2xl shadow-lg overflow-hidden group hover:shadow-2xl transition-all duration-300\">\n      <div className=\"relative overflow-hidden\">\n        <img\n          src={product.imageUrl}\n          alt={product.name}\n          className=\"w-full h-64 object-cover group-hover:scale-105 transition-transform duration-300\"\n          loading=\"lazy\"\n          onError={(e) => {\n            const img = e.target as HTMLImageElement;\n            img.src = 'https://images.unsplash.com/photo-1515562141207-7a88fb7ce338?w=400&h=300&fit=crop&crop=center';\n          }}\n        />\n        <div className=\"absolute top-4 right-4\">\n          {product.featured === 1 ? (\n            <Badge className={getBadgeColor()}>Featured</Badge>\n          ) : (\n            <Badge variant=\"secondary\" className={getBadgeColor()}>\n              {product.material === \"gold\" ? \"Gold\" : \"Silver\"}\n            </Badge>\n          )}\n        </div>\n        <button className=\"absolute top-4 left-4 w-8 h-8 bg-white rounded-full flex items-center justify-center opacity-0 group-hover:opacity-100 transition-all duration-300 hover:bg-red-50\">\n          <Heart className=\"w-4 h-4 text-gray-600 hover:text-red-500 transition-colors\" />\n        </button>\n      </div>\n      \n      <div className=\"p-6\">\n        <h4 className=\"font-semibold text-lg text-navy mb-2 line-clamp-1\">{product.name}</h4>\n        <p className=\"text-gray-600 text-sm mb-3 line-clamp-2\">{product.description}</p>\n        \n        <div className=\"flex flex-col space-y-2 mb-4\">\n          <div className=\"flex justify-between items-center\">\n            <span className=\"text-lg font-bold text-gold\">{product.weight}g</span>\n            <span className=\"text-sm text-gray-500\">{product.purity}</span>\n          </div>\n          {priceData && (\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-xs text-gray-500\">\n                ₹{priceData.ratePerGram}/{t('product.weight').toLowerCase()}\n              </span>\n              <span className=\"text-lg font-bold text-navy\">\n                ₹{priceData.totalPrice}\n              </span>\n            </div>\n          )}\n          {product.region && (\n            <div className=\"text-xs text-gray-500 capitalize\">\n              {product.region} Style\n            </div>\n          )}\n        </div>\n        \n        <div className=\"flex space-x-2\">\n          <Link href={`/product/${product.id}`} className=\"flex-1\">\n            <Button \n              className={`${getButtonClass()} text-white w-full py-2 px-4 rounded-lg text-sm font-medium hover:shadow-lg transition-all duration-300`}\n            >\n              View Details\n            </Button>\n          </Link>\n          <Button \n            variant=\"outline\" \n            size=\"sm\"\n            className=\"w-10 h-10 p-0 border-gold text-gold hover:bg-gold hover:text-white transition-all duration-300\"\n          >\n            <ShoppingBag className=\"w-4 h-4\" />\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4311},"client/src/components/RatesDisplay.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Rate } from \"@shared/schema\";\nimport { TrendingUp, TrendingDown } from \"lucide-react\";\n\nexport default function RatesDisplay() {\n  const { data: rates } = useQuery<Rate[]>({\n    queryKey: [\"/api/rates\"],\n    refetchInterval: 30000, // Refetch every 30 seconds\n  });\n\n  const goldRate = rates?.find(rate => rate.material === \"gold\");\n  const silverRate = rates?.find(rate => rate.material === \"silver\");\n\n  const formatChange = (change: string) => {\n    const changeNum = parseFloat(change);\n    const isPositive = changeNum >= 0;\n    return {\n      value: Math.abs(changeNum).toFixed(2),\n      isPositive,\n      icon: isPositive ? TrendingUp : TrendingDown,\n      color: isPositive ? \"text-green-400\" : \"text-red-400\"\n    };\n  };\n\n  return (\n    <section className=\"bg-navy text-white py-4\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"flex flex-col md:flex-row justify-center items-center space-y-4 md:space-y-0 md:space-x-8 text-center\">\n          {goldRate && (\n            <div className=\"flex items-center space-x-2\">\n              <i className=\"fas fa-coins text-gold text-xl\"></i>\n              <span className=\"font-medium\">Gold (24K):</span>\n              <span className=\"font-bold text-gold text-lg\">₹{parseFloat(goldRate.rate).toFixed(0)}/gram</span>\n              {(() => {\n                const change = formatChange(goldRate.change);\n                const Icon = change.icon;\n                return (\n                  <span className={`${change.color} text-sm flex items-center`}>\n                    <Icon className=\"w-4 h-4 mr-1\" />\n                    ₹{change.value}\n                  </span>\n                );\n              })()}\n            </div>\n          )}\n          \n          <div className=\"hidden md:block w-px h-6 bg-gray-500\"></div>\n          \n          {silverRate && (\n            <div className=\"flex items-center space-x-2\">\n              <i className=\"fas fa-coins text-silver text-xl\"></i>\n              <span className=\"font-medium\">Silver:</span>\n              <span className=\"font-bold text-silver text-lg\">₹{parseFloat(silverRate.rate).toFixed(1)}/gram</span>\n              {(() => {\n                const change = formatChange(silverRate.change);\n                const Icon = change.icon;\n                return (\n                  <span className={`${change.color} text-sm flex items-center`}>\n                    <Icon className=\"w-4 h-4 mr-1\" />\n                    ₹{change.value}\n                  </span>\n                );\n              })()}\n            </div>\n          )}\n          \n          <div className=\"hidden lg:block\">\n            <span className=\"text-sm text-gray-300\">\n              Updated: {goldRate ? new Date(goldRate.updatedAt).toLocaleTimeString() : \"Loading...\"}\n            </span>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":2917},"client/src/components/SignupForm.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardHeader, CardTitle, CardContent } from \"@/components/ui/card\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Eye, EyeOff } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface SignupFormProps {\n  onSuccess: () => void;\n  onToggleMode: () => void;\n}\n\nexport default function SignupForm({ onSuccess, onToggleMode }: SignupFormProps) {\n  const [formData, setFormData] = useState({\n    firstName: \"\",\n    lastName: \"\",\n    email: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n  });\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const { toast } = useToast();\n\n  const signupMutation = useMutation({\n    mutationFn: async (userData: Omit<typeof formData, 'confirmPassword'>) => {\n      const response = await apiRequest(\"/api/auth/signup\", {\n        method: \"POST\",\n        body: JSON.stringify(userData),\n      });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      localStorage.setItem(\"token\", data.token);\n      onSuccess();\n      toast({\n        title: \"Account Created\",\n        description: `Welcome, ${data.user.firstName}! Your account has been created successfully.`,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Signup Failed\",\n        description: error.message || \"Failed to create account\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (formData.password !== formData.confirmPassword) {\n      toast({\n        title: \"Password Mismatch\",\n        description: \"Passwords do not match\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (formData.password.length < 6) {\n      toast({\n        title: \"Password Too Short\",\n        description: \"Password must be at least 6 characters long\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const { confirmPassword, ...userData } = formData;\n    signupMutation.mutate(userData);\n  };\n\n  const handleInputChange = (field: string, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  return (\n    <Card className=\"w-full max-w-md mx-auto\">\n      <CardHeader>\n        <CardTitle className=\"text-center text-navy\">Create Your Account</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"firstName\">First Name</Label>\n              <Input\n                id=\"firstName\"\n                type=\"text\"\n                value={formData.firstName}\n                onChange={(e) => handleInputChange('firstName', e.target.value)}\n                placeholder=\"Enter your first name\"\n                required\n              />\n            </div>\n            \n            <div>\n              <Label htmlFor=\"lastName\">Last Name</Label>\n              <Input\n                id=\"lastName\"\n                type=\"text\"\n                value={formData.lastName}\n                onChange={(e) => handleInputChange('lastName', e.target.value)}\n                placeholder=\"Enter your last name\"\n                required\n              />\n            </div>\n          </div>\n\n          <div>\n            <Label htmlFor=\"email\">Email</Label>\n            <Input\n              id=\"email\"\n              type=\"email\"\n              value={formData.email}\n              onChange={(e) => handleInputChange('email', e.target.value)}\n              placeholder=\"Enter your email\"\n              required\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"password\">Password</Label>\n            <div className=\"relative\">\n              <Input\n                id=\"password\"\n                type={showPassword ? \"text\" : \"password\"}\n                value={formData.password}\n                onChange={(e) => handleInputChange('password', e.target.value)}\n                placeholder=\"Enter your password\"\n                required\n              />\n              <Button\n                type=\"button\"\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"absolute right-2 top-1/2 transform -translate-y-1/2\"\n                onClick={() => setShowPassword(!showPassword)}\n              >\n                {showPassword ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n              </Button>\n            </div>\n          </div>\n\n          <div>\n            <Label htmlFor=\"confirmPassword\">Confirm Password</Label>\n            <div className=\"relative\">\n              <Input\n                id=\"confirmPassword\"\n                type={showConfirmPassword ? \"text\" : \"password\"}\n                value={formData.confirmPassword}\n                onChange={(e) => handleInputChange('confirmPassword', e.target.value)}\n                placeholder=\"Confirm your password\"\n                required\n              />\n              <Button\n                type=\"button\"\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"absolute right-2 top-1/2 transform -translate-y-1/2\"\n                onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n              >\n                {showConfirmPassword ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n              </Button>\n            </div>\n          </div>\n\n          <Button\n            type=\"submit\"\n            className=\"w-full gold-gradient text-white\"\n            disabled={signupMutation.isPending}\n          >\n            {signupMutation.isPending ? \"Creating Account...\" : \"Create Account\"}\n          </Button>\n\n          <div className=\"text-center\">\n            <button\n              type=\"button\"\n              onClick={onToggleMode}\n              className=\"text-sm text-gold hover:underline\"\n            >\n              Already have an account? Sign in\n            </button>\n          </div>\n        </form>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":6289},"client/src/components/WhyChooseUs.tsx":{"content":"export default function WhyChooseUs() {\n  const features = [\n    {\n      icon: \"fas fa-certificate\",\n      title: \"Certified Quality\",\n      description: \"All our jewelry comes with proper hallmarking and certification for purity guarantee.\"\n    },\n    {\n      icon: \"fas fa-tools\",\n      title: \"Master Craftsmanship\",\n      description: \"Our skilled artisans create each piece with precision and attention to detail.\"\n    },\n    {\n      icon: \"fas fa-exchange-alt\",\n      title: \"Easy Exchange\",\n      description: \"Flexible exchange policies and lifetime maintenance services for your peace of mind.\"\n    },\n    {\n      icon: \"fas fa-headset\",\n      title: \"Personal Service\",\n      description: \"Dedicated customer support and personalized consultation for your special moments.\"\n    }\n  ];\n\n  return (\n    <section className=\"py-16 bg-white\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"text-center mb-12\">\n          <h3 className=\"font-playfair text-4xl font-bold text-navy mb-4\">Why Choose Shree Jewellers?</h3>\n          <p className=\"text-gray-600 text-lg max-w-2xl mx-auto\">\n            With over 25 years of expertise, we bring you the finest jewelry with unmatched quality and service.\n          </p>\n        </div>\n\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-8\">\n          {features.map((feature, index) => (\n            <div key={index} className=\"text-center group\">\n              <div className=\"w-16 h-16 bg-gold bg-opacity-10 rounded-full flex items-center justify-center mx-auto mb-4 group-hover:bg-gold group-hover:bg-opacity-100 transition-all duration-300\">\n                <i className={`${feature.icon} text-gold text-2xl group-hover:text-white transition-colors duration-300`}></i>\n              </div>\n              <h4 className=\"font-semibold text-lg text-navy mb-3\">{feature.title}</h4>\n              <p className=\"text-gray-600\">{feature.description}</p>\n            </div>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":2015},"client/src/contexts/AuthContext.tsx":{"content":"import { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { useQuery } from '@tanstack/react-query';\n\ninterface User {\n  id: string;\n  email: string;\n  firstName?: string;\n  lastName?: string;\n  role: 'user' | 'admin';\n}\n\ninterface AuthContextType {\n  user: User | null;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n  login: (token: string, userData: User) => void;\n  logout: () => void;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const [user, setUser] = useState<User | null>(null);\n  const [token, setToken] = useState<string | null>(\n    () => localStorage.getItem('token')\n  );\n\n  // Get current user if token exists\n  const { data: userData, isLoading } = useQuery({\n    queryKey: ['/api/auth/me'],\n    enabled: !!token,\n    retry: false,\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n\n  useEffect(() => {\n    if (userData) {\n      setUser(userData);\n    }\n  }, [userData]);\n\n  const login = (newToken: string, userData: User) => {\n    localStorage.setItem('token', newToken);\n    setToken(newToken);\n    setUser(userData);\n  };\n\n  const logout = () => {\n    localStorage.removeItem('token');\n    setToken(null);\n    setUser(null);\n  };\n\n  const value: AuthContextType = {\n    user,\n    isAuthenticated: !!user,\n    isLoading: isLoading && !!token,\n    login,\n    logout,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}","size_bytes":1729},"client/src/contexts/LanguageContext.tsx":{"content":"import { createContext, useContext, useState, ReactNode } from 'react';\n\ntype Language = 'en' | 'hi' | 'mr';\n\ninterface LanguageContextType {\n  language: Language;\n  setLanguage: (lang: Language) => void;\n  t: (key: string) => string;\n}\n\ninterface Translations {\n  [key: string]: {\n    en: string;\n    hi: string;\n    mr: string;\n  };\n}\n\nconst translations: Translations = {\n  // Header\n  'nav.home': {\n    en: 'Home',\n    hi: 'होम',\n    mr: 'मुख्यपृष्ठ'\n  },\n  'nav.collections': {\n    en: 'Collections',\n    hi: 'संग्रह',\n    mr: 'संग्रह'\n  },\n  'nav.necklaces': {\n    en: 'Necklaces',\n    hi: 'हार',\n    mr: 'हार'\n  },\n  'nav.haras': {\n    en: 'Haras',\n    hi: 'हारा',\n    mr: 'हारा'\n  },\n  'nav.mangalsutra': {\n    en: 'Mangalsutra',\n    hi: 'मंगलसूत्र',\n    mr: 'मंगळसूत्र'\n  },\n  'nav.rings': {\n    en: 'Rings',\n    hi: 'अंगूठी',\n    mr: 'अंगठी'\n  },\n  'nav.earrings': {\n    en: 'Earrings',\n    hi: 'कान की बाली',\n    mr: 'कानातले'\n  },\n  'nav.bracelets': {\n    en: 'Bracelets',\n    hi: 'कंगन',\n    mr: 'कंगण'\n  },\n  'nav.pooja-items': {\n    en: 'Pooja Items',\n    hi: 'पूजा सामग्री',\n    mr: 'पूजा साहित्य'\n  },\n  'search.placeholder': {\n    en: 'Search products...',\n    hi: 'उत्पाद खोजें...',\n    mr: 'उत्पादने शोधा...'\n  },\n  \n  // Hero Section\n  'hero.title': {\n    en: 'Timeless Elegance in Gold & Silver',\n    hi: 'सोने और चांदी में कालातीत लालित्य',\n    mr: 'सोने आणि चांदीमध्ये कालातीत शोभा'\n  },\n  'hero.subtitle': {\n    en: 'Discover our exquisite collection of handcrafted jewelry, where traditional artistry meets modern design.',\n    hi: 'हमारे हस्तशिल्प आभूषणों के उत्कृष्ट संग्रह की खोज करें, जहां पारंपरिक कलाकारी आधुनिक डिजाइन से मिलती है।',\n    mr: 'आमच्या हस्तकलेच्या दागिन्यांचा उत्कृष्ट संग्रह शोधा, जिथे पारंपारिक कलाकारी आधुनिक डिझाइनशी मिळते.'\n  },\n  'hero.explore': {\n    en: 'Explore Collection',\n    hi: 'संग्रह देखें',\n    mr: 'संग्रह पहा'\n  },\n  'hero.appointment': {\n    en: 'Book Appointment',\n    hi: 'अपॉइंटमेंट बुक करें',\n    mr: 'भेटीची वेळ बुक करा'\n  },\n  \n  // Rates\n  'rates.gold': {\n    en: 'Gold (24K)',\n    hi: 'सोना (24K)',\n    mr: 'सोने (24K)'\n  },\n  'rates.silver': {\n    en: 'Silver',\n    hi: 'चांदी',\n    mr: 'चांदी'\n  },\n  'rates.updated': {\n    en: 'Updated',\n    hi: 'अपडेट किया गया',\n    mr: 'अपडेट केले'\n  },\n  \n  // Product Details\n  'product.weight': {\n    en: 'Weight',\n    hi: 'वजन',\n    mr: 'वजन'\n  },\n  'product.purity': {\n    en: 'Purity',\n    hi: 'शुद्धता',\n    mr: 'शुद्धता'\n  },\n  'product.material': {\n    en: 'Material',\n    hi: 'सामग्री',\n    mr: 'साहित्य'\n  },\n  'product.category': {\n    en: 'Category',\n    hi: 'श्रेणी',\n    mr: 'श्रेणी'\n  },\n  'product.region': {\n    en: 'Region',\n    hi: 'क्षेत्र',\n    mr: 'प्रदेश'\n  },\n  'product.getQuote': {\n    en: 'Get Quote',\n    hi: 'कोटेशन प्राप्त करें',\n    mr: 'कोटेशन मिळवा'\n  },\n  'product.callNow': {\n    en: 'Call Now',\n    hi: 'अभी कॉल करें',\n    mr: 'आता कॉल करा'\n  },\n  'product.viewDetails': {\n    en: 'View Details',\n    hi: 'विवरण देखें',\n    mr: 'तपशील पहा'\n  },\n  \n  // Contact\n  'contact.title': {\n    en: 'Visit Our Store',\n    hi: 'हमारी दुकान पर आएं',\n    mr: 'आमच्या दुकानात या'\n  },\n  'contact.address': {\n    en: 'Address',\n    hi: 'पता',\n    mr: 'पत्ता'\n  },\n  'contact.phone': {\n    en: 'Phone',\n    hi: 'फोन',\n    mr: 'फोन'\n  },\n  'contact.hours': {\n    en: 'Business Hours',\n    hi: 'व्यापारिक घंटे',\n    mr: 'व्यवसायाचे तास'\n  },\n  'contact.email': {\n    en: 'Email',\n    hi: 'ईमेल',\n    mr: 'ईमेल'\n  },\n  \n  // Chat\n  'chat.title': {\n    en: 'Live Chat',\n    hi: 'लाइव चैट',\n    mr: 'लाइव्ह चॅट'\n  },\n  'chat.subtitle': {\n    en: \"We're here to help!\",\n    hi: 'हम आपकी मदद के लिए यहाँ हैं!',\n    mr: 'आम्ही मदतीसाठी येथे आहोत!'\n  },\n  'chat.placeholder': {\n    en: 'Type your message...',\n    hi: 'अपना संदेश टाइप करें...',\n    mr: 'तुमचा संदेश टाइप करा...'\n  },\n  \n  // Common\n  'common.featured': {\n    en: 'Featured',\n    hi: 'विशेष',\n    mr: 'वैशिष्ट्यीकृत'\n  },\n  'common.gold': {\n    en: 'Gold',\n    hi: 'सोना',\n    mr: 'सोने'\n  },\n  'common.silver': {\n    en: 'Silver',\n    hi: 'चांदी',\n    mr: 'चांदी'\n  },\n  'company.name': {\n    en: 'Shree Jewellers',\n    hi: 'श्री ज्वेलर्स',\n    mr: 'श्री ज्वेलर्स'\n  }\n};\n\nconst LanguageContext = createContext<LanguageContextType | undefined>(undefined);\n\nexport function LanguageProvider({ children }: { children: ReactNode }) {\n  const [language, setLanguage] = useState<Language>('en');\n\n  const t = (key: string): string => {\n    return translations[key]?.[language] || key;\n  };\n\n  return (\n    <LanguageContext.Provider value={{ language, setLanguage, t }}>\n      {children}\n    </LanguageContext.Provider>\n  );\n}\n\nexport function useLanguage() {\n  const context = useContext(LanguageContext);\n  if (context === undefined) {\n    throw new Error('useLanguage must be used within a LanguageProvider');\n  }\n  return context;\n}","size_bytes":6443},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  url: string,\n  options?: {\n    method?: string;\n    body?: string;\n    headers?: Record<string, string>;\n  }\n): Promise<Response> {\n  const token = localStorage.getItem('token');\n  const headers: Record<string, string> = {\n    'Content-Type': 'application/json',\n    ...options?.headers,\n  };\n\n  if (token) {\n    headers['Authorization'] = `Bearer ${token}`;\n  }\n\n  const res = await fetch(url, {\n    method: options?.method || 'GET',\n    headers,\n    body: options?.body,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const token = localStorage.getItem('token');\n    const headers: Record<string, string> = {};\n    \n    if (token) {\n      headers['Authorization'] = `Bearer ${token}`;\n    }\n\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      headers,\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1804},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/AdminDashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertProductSchema, type InsertProduct, type Product } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Link, useLocation } from \"wouter\";\n\nexport default function AdminDashboard() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [editingProduct, setEditingProduct] = useState<Product | null>(null);\n\n  // Check admin authentication\n  const adminToken = localStorage.getItem(\"adminToken\");\n  if (!adminToken) {\n    setLocation(\"/admin\");\n    return null;\n  }\n\n  const { data: products = [], isLoading } = useQuery({\n    queryKey: [\"/api/products\"],\n  });\n\n  const { data: rates = [] } = useQuery({\n    queryKey: [\"/api/rates\"],\n  });\n\n  const form = useForm<InsertProduct>({\n    resolver: zodResolver(insertProductSchema),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n      category: \"\",\n      subcategory: \"\",\n      weight: \"0\",\n      purity: \"\",\n      material: \"gold\",\n      imageUrl: \"\",\n      featured: 0,\n      pricePerGram: \"6250.00\",\n      stock: 1,\n    },\n  });\n\n  const addProductMutation = useMutation({\n    mutationFn: async (data: InsertProduct) => {\n      return await apiRequest(\"/api/products\", \"POST\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      toast({\n        title: \"Product added\",\n        description: \"Product has been successfully added to the catalog\",\n      });\n      setIsAddDialogOpen(false);\n      form.reset();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to add product\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateProductMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<InsertProduct> }) => {\n      return await apiRequest(`/api/products/${id}`, \"PUT\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      toast({\n        title: \"Product updated\",\n        description: \"Product has been successfully updated\",\n      });\n      setEditingProduct(null);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update product\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteProductMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest(`/api/products/${id}`, \"DELETE\");\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      toast({\n        title: \"Product deleted\",\n        description: \"Product has been successfully removed\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete product\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: InsertProduct) => {\n    if (editingProduct) {\n      updateProductMutation.mutate({ id: editingProduct.id, data });\n    } else {\n      addProductMutation.mutate(data);\n    }\n  };\n\n  const handleEdit = (product: Product) => {\n    setEditingProduct(product);\n    form.reset({\n      name: product.name,\n      description: product.description,\n      category: product.category,\n      subcategory: product.subcategory || \"\",\n      weight: product.weight,\n      purity: product.purity,\n      material: product.material,\n      imageUrl: product.imageUrl,\n      featured: product.featured || 0,\n      pricePerGram: product.pricePerGram || \"6250.00\",\n      stock: product.stock || 1,\n    });\n    setIsAddDialogOpen(true);\n  };\n\n  const handleDelete = (product: Product) => {\n    if (confirm(`Are you sure you want to delete \"${product.name}\"?`)) {\n      deleteProductMutation.mutate(product.id);\n    }\n  };\n\n  const logout = () => {\n    localStorage.removeItem(\"adminToken\");\n    setLocation(\"/admin\");\n  };\n\n  const categories = [\n    { value: \"patta-poth\", label: \"Patta Poth 22K\" },\n    { value: \"necklace\", label: \"Necklaces\" },\n    { value: \"fancy-poth\", label: \"Fancy Poth 22K\" },\n    { value: \"choker\", label: \"Chokers 22K\" },\n  ];\n\n  const subcategories: Record<string, string[]> = {\n    \"patta-poth\": [\"long\", \"short\"],\n    \"necklace\": [\"temple-22k\", \"fancy-22k\", \"classic-22k\", \"fancy-20k\", \"classic-20k\", \"arbi-20k\"],\n    \"fancy-poth\": [\"with-pendant\", \"cartier\", \"nano\", \"short\", \"long\"],\n    \"choker\": [\"temple\", \"yellow\"],\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-cream flex items-center justify-center\">\n        <div className=\"text-center\">\n          <i className=\"fas fa-spinner fa-spin text-4xl text-gold mb-4\"></i>\n          <p className=\"text-lg\">Loading admin dashboard...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-cream\">\n      <div className=\"bg-navy text-white p-4\">\n        <div className=\"container mx-auto flex justify-between items-center\">\n          <div className=\"flex items-center space-x-4\">\n            <h1 className=\"text-2xl font-playfair font-bold\">\n              <i className=\"fas fa-user-shield mr-2\"></i>\n              Admin Dashboard\n            </h1>\n            <span className=\"text-gold\">Shree Jewellers</span>\n          </div>\n          <div className=\"flex items-center space-x-4\">\n            <Link href=\"/\">\n              <Button variant=\"outline\">\n                <i className=\"fas fa-home mr-2\"></i>\n                View Website\n              </Button>\n            </Link>\n            <Button onClick={logout} variant=\"destructive\">\n              <i className=\"fas fa-sign-out-alt mr-2\"></i>\n              Logout\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"container mx-auto p-6\">\n        <Tabs defaultValue=\"products\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-3\">\n            <TabsTrigger value=\"products\">\n              <i className=\"fas fa-gem mr-2\"></i>\n              Products ({products.length})\n            </TabsTrigger>\n            <TabsTrigger value=\"rates\">\n              <i className=\"fas fa-chart-line mr-2\"></i>\n              Gold/Silver Rates\n            </TabsTrigger>\n            <TabsTrigger value=\"analytics\">\n              <i className=\"fas fa-analytics mr-2\"></i>\n              Analytics\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"products\" className=\"space-y-6\">\n            <div className=\"flex justify-between items-center\">\n              <h2 className=\"text-2xl font-semibold\">Product Management</h2>\n              <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n                <DialogTrigger asChild>\n                  <Button className=\"gold-gradient text-white\">\n                    <i className=\"fas fa-plus mr-2\"></i>\n                    Add New Product\n                  </Button>\n                </DialogTrigger>\n                <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n                  <DialogHeader>\n                    <DialogTitle>\n                      {editingProduct ? \"Edit Product\" : \"Add New Product\"}\n                    </DialogTitle>\n                    <DialogDescription>\n                      {editingProduct ? \"Update product details\" : \"Add a new jewelry item to your catalog\"}\n                    </DialogDescription>\n                  </DialogHeader>\n                  <Form {...form}>\n                    <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <FormField\n                          control={form.control}\n                          name=\"name\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Product Name</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"Elegant Necklace 22K\" {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={form.control}\n                          name=\"weight\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Weight (grams)</FormLabel>\n                              <FormControl>\n                                <Input type=\"number\" step=\"0.01\" placeholder=\"25.50\" {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n\n                      <FormField\n                        control={form.control}\n                        name=\"description\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Description</FormLabel>\n                            <FormControl>\n                              <Textarea \n                                placeholder=\"Beautiful traditional design with intricate craftsmanship...\"\n                                rows={3}\n                                {...field} \n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <FormField\n                          control={form.control}\n                          name=\"category\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Category</FormLabel>\n                              <Select onValueChange={field.onChange} value={field.value}>\n                                <FormControl>\n                                  <SelectTrigger>\n                                    <SelectValue placeholder=\"Select category\" />\n                                  </SelectTrigger>\n                                </FormControl>\n                                <SelectContent>\n                                  {categories.map((cat) => (\n                                    <SelectItem key={cat.value} value={cat.value}>\n                                      {cat.label}\n                                    </SelectItem>\n                                  ))}\n                                </SelectContent>\n                              </Select>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={form.control}\n                          name=\"subcategory\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Subcategory</FormLabel>\n                              <Select onValueChange={field.onChange} value={field.value}>\n                                <FormControl>\n                                  <SelectTrigger>\n                                    <SelectValue placeholder=\"Select subcategory\" />\n                                  </SelectTrigger>\n                                </FormControl>\n                                <SelectContent>\n                                  {form.watch(\"category\") && subcategories[form.watch(\"category\")]?.map((sub) => (\n                                    <SelectItem key={sub} value={sub}>\n                                      {sub}\n                                    </SelectItem>\n                                  ))}\n                                </SelectContent>\n                              </Select>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n\n                      <div className=\"grid grid-cols-3 gap-4\">\n                        <FormField\n                          control={form.control}\n                          name=\"purity\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Purity</FormLabel>\n                              <Select onValueChange={field.onChange} value={field.value}>\n                                <FormControl>\n                                  <SelectTrigger>\n                                    <SelectValue placeholder=\"Select purity\" />\n                                  </SelectTrigger>\n                                </FormControl>\n                                <SelectContent>\n                                  <SelectItem value=\"22K Gold\">22K Gold</SelectItem>\n                                  <SelectItem value=\"20K Gold\">20K Gold</SelectItem>\n                                  <SelectItem value=\"18K Gold\">18K Gold</SelectItem>\n                                  <SelectItem value=\"925 Silver\">925 Silver</SelectItem>\n                                </SelectContent>\n                              </Select>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={form.control}\n                          name=\"material\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Material</FormLabel>\n                              <Select onValueChange={field.onChange} value={field.value}>\n                                <FormControl>\n                                  <SelectTrigger>\n                                    <SelectValue placeholder=\"Select material\" />\n                                  </SelectTrigger>\n                                </FormControl>\n                                <SelectContent>\n                                  <SelectItem value=\"gold\">Gold</SelectItem>\n                                  <SelectItem value=\"silver\">Silver</SelectItem>\n                                </SelectContent>\n                              </Select>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={form.control}\n                          name=\"pricePerGram\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Price per Gram (₹)</FormLabel>\n                              <FormControl>\n                                <Input type=\"number\" step=\"0.01\" placeholder=\"6250.00\" {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n\n                      <FormField\n                        control={form.control}\n                        name=\"imageUrl\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Image URL</FormLabel>\n                            <FormControl>\n                              <Input \n                                placeholder=\"https://cdn.quicksell.co/...\"\n                                {...field} \n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <FormField\n                          control={form.control}\n                          name=\"featured\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Featured Product</FormLabel>\n                              <Select onValueChange={(value) => field.onChange(Number(value))} value={String(field.value)}>\n                                <FormControl>\n                                  <SelectTrigger>\n                                    <SelectValue placeholder=\"Featured?\" />\n                                  </SelectTrigger>\n                                </FormControl>\n                                <SelectContent>\n                                  <SelectItem value=\"0\">No</SelectItem>\n                                  <SelectItem value=\"1\">Yes</SelectItem>\n                                </SelectContent>\n                              </Select>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={form.control}\n                          name=\"stock\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Stock Status</FormLabel>\n                              <Select onValueChange={(value) => field.onChange(Number(value))} value={String(field.value)}>\n                                <FormControl>\n                                  <SelectTrigger>\n                                    <SelectValue placeholder=\"In Stock?\" />\n                                  </SelectTrigger>\n                                </FormControl>\n                                <SelectContent>\n                                  <SelectItem value=\"0\">Out of Stock</SelectItem>\n                                  <SelectItem value=\"1\">In Stock</SelectItem>\n                                </SelectContent>\n                              </Select>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n\n                      <div className=\"flex justify-end space-x-4 pt-4\">\n                        <Button \n                          type=\"button\" \n                          variant=\"outline\" \n                          onClick={() => {\n                            setIsAddDialogOpen(false);\n                            setEditingProduct(null);\n                            form.reset();\n                          }}\n                        >\n                          Cancel\n                        </Button>\n                        <Button \n                          type=\"submit\" \n                          className=\"gold-gradient text-white\"\n                          disabled={addProductMutation.isPending || updateProductMutation.isPending}\n                        >\n                          {addProductMutation.isPending || updateProductMutation.isPending ? (\n                            <>\n                              <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                              {editingProduct ? \"Updating...\" : \"Adding...\"}\n                            </>\n                          ) : (\n                            <>\n                              <i className=\"fas fa-save mr-2\"></i>\n                              {editingProduct ? \"Update Product\" : \"Add Product\"}\n                            </>\n                          )}\n                        </Button>\n                      </div>\n                    </form>\n                  </Form>\n                </DialogContent>\n              </Dialog>\n            </div>\n\n            <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {products.map((product: Product) => (\n                <Card key={product.id} className=\"overflow-hidden\">\n                  <div className=\"aspect-square overflow-hidden\">\n                    <img \n                      src={product.imageUrl} \n                      alt={product.name}\n                      className=\"w-full h-full object-cover hover:scale-105 transition-transform duration-300\"\n                    />\n                  </div>\n                  <CardHeader className=\"pb-2\">\n                    <div className=\"flex justify-between items-start\">\n                      <CardTitle className=\"text-lg line-clamp-2\">{product.name}</CardTitle>\n                      <div className=\"flex space-x-1\">\n                        {product.featured === 1 && (\n                          <span className=\"bg-gold text-white text-xs px-2 py-1 rounded\">\n                            Featured\n                          </span>\n                        )}\n                        {product.stock === 0 && (\n                          <span className=\"bg-red-500 text-white text-xs px-2 py-1 rounded\">\n                            Out of Stock\n                          </span>\n                        )}\n                      </div>\n                    </div>\n                    <CardDescription className=\"line-clamp-2\">\n                      {product.description}\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"pt-0\">\n                    <div className=\"space-y-2 text-sm\">\n                      <div className=\"flex justify-between\">\n                        <span>Weight:</span>\n                        <span className=\"font-medium\">{product.weight}g</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>Purity:</span>\n                        <span className=\"font-medium\">{product.purity}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>Category:</span>\n                        <span className=\"font-medium capitalize\">{product.category}</span>\n                      </div>\n                      {product.subcategory && (\n                        <div className=\"flex justify-between\">\n                          <span>Type:</span>\n                          <span className=\"font-medium capitalize\">{product.subcategory}</span>\n                        </div>\n                      )}\n                    </div>\n                    <div className=\"flex space-x-2 mt-4\">\n                      <Button \n                        onClick={() => handleEdit(product)}\n                        variant=\"outline\" \n                        size=\"sm\" \n                        className=\"flex-1\"\n                      >\n                        <i className=\"fas fa-edit mr-1\"></i>\n                        Edit\n                      </Button>\n                      <Button \n                        onClick={() => handleDelete(product)}\n                        variant=\"destructive\" \n                        size=\"sm\"\n                        disabled={deleteProductMutation.isPending}\n                      >\n                        <i className=\"fas fa-trash mr-1\"></i>\n                        Delete\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"rates\" className=\"space-y-6\">\n            <h2 className=\"text-2xl font-semibold\">Current Metal Rates</h2>\n            <div className=\"grid md:grid-cols-2 gap-6\">\n              {rates.map((rate: any) => (\n                <Card key={rate.material}>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center\">\n                      <i className={`fas ${rate.material === 'gold' ? 'fa-coins' : 'fa-gem'} text-${rate.material === 'gold' ? 'yellow' : 'gray'}-500 mr-2`}></i>\n                      {rate.material === 'gold' ? 'Gold' : 'Silver'} Rate\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-2\">\n                      <div className=\"text-3xl font-bold text-gold\">\n                        ₹{parseFloat(rate.rate).toLocaleString('en-IN', { minimumFractionDigits: 2 })}\n                      </div>\n                      <div className=\"text-sm text-gray-600\">per gram</div>\n                      <div className={`text-sm ${rate.change >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                        {rate.change >= 0 ? '+' : ''}₹{parseFloat(rate.change).toFixed(2)} from last update\n                      </div>\n                      <div className=\"text-xs text-gray-500\">\n                        Updated: {new Date(rate.updatedAt).toLocaleString()}\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"analytics\" className=\"space-y-6\">\n            <h2 className=\"text-2xl font-semibold\">Analytics Dashboard</h2>\n            <div className=\"grid md:grid-cols-3 gap-6\">\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Total Products</CardTitle>\n                  <i className=\"fas fa-gem text-gold\"></i>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\">{products.length}</div>\n                  <p className=\"text-xs text-gray-600\">\n                    {products.filter((p: Product) => p.featured === 1).length} featured\n                  </p>\n                </CardContent>\n              </Card>\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">In Stock</CardTitle>\n                  <i className=\"fas fa-check-circle text-green-500\"></i>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\">\n                    {products.filter((p: Product) => p.stock === 1).length}\n                  </div>\n                  <p className=\"text-xs text-gray-600\">\n                    {products.filter((p: Product) => p.stock === 0).length} out of stock\n                  </p>\n                </CardContent>\n              </Card>\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Categories</CardTitle>\n                  <i className=\"fas fa-tags text-blue-500\"></i>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\">\n                    {new Set(products.map((p: Product) => p.category)).size}\n                  </div>\n                  <p className=\"text-xs text-gray-600\">\n                    Active categories\n                  </p>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}","size_bytes":28208},"client/src/pages/AdminLogin.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { loginSchema, type LoginSchema } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Link, useLocation } from \"wouter\";\n\ntype LoginSchema = {\n  username: string;\n  password: string;\n};\n\nexport default function AdminLogin() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const form = useForm<LoginSchema>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n    },\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (data: LoginSchema) => {\n      return await apiRequest(\"/api/auth/login\", \"POST\", data);\n    },\n    onSuccess: (data) => {\n      if (data.user.role === \"admin\") {\n        toast({\n          title: \"Login successful\",\n          description: \"Welcome to admin panel\",\n        });\n        localStorage.setItem(\"adminToken\", data.token);\n        setLocation(\"/admin/dashboard\");\n      } else {\n        toast({\n          title: \"Access denied\",\n          description: \"Admin privileges required\",\n          variant: \"destructive\",\n        });\n      }\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Login failed\",\n        description: error.message || \"Invalid credentials\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: LoginSchema) => {\n    loginMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-cream flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"space-y-1\">\n          <CardTitle className=\"text-2xl font-playfair text-center\">\n            <i className=\"fas fa-user-shield text-gold mr-2\"></i>\n            Admin Login\n          </CardTitle>\n          <CardDescription className=\"text-center\">\n            Enter your admin credentials to access the management panel\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"username\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Username</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"admin\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"password\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Password</FormLabel>\n                    <FormControl>\n                      <Input type=\"password\" placeholder=\"••••••••\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <Button \n                type=\"submit\" \n                className=\"w-full gold-gradient text-white\"\n                disabled={loginMutation.isPending}\n              >\n                {loginMutation.isPending ? (\n                  <>\n                    <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                    Signing in...\n                  </>\n                ) : (\n                  <>\n                    <i className=\"fas fa-sign-in-alt mr-2\"></i>\n                    Sign In\n                  </>\n                )}\n              </Button>\n            </form>\n          </Form>\n          <div className=\"mt-6 text-center\">\n            <Link href=\"/\">\n              <Button variant=\"outline\" className=\"w-full\">\n                <i className=\"fas fa-arrow-left mr-2\"></i>\n                Back to Website\n              </Button>\n            </Link>\n          </div>\n          <div className=\"mt-4 p-3 bg-yellow-50 border border-yellow-200 rounded-lg\">\n            <p className=\"text-sm text-yellow-800\">\n              <i className=\"fas fa-info-circle mr-1\"></i>\n              <strong>Demo Credentials:</strong> admin / admin123\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":4748},"client/src/pages/CategoryPage.tsx":{"content":"import { useParams, Link } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport Header from \"@/components/Header\";\nimport ProductCard from \"@/components/ProductCard\";\nimport Footer from \"@/components/Footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ChevronRight, Filter, Grid, List } from \"lucide-react\";\nimport { useLanguage } from \"@/contexts/LanguageContext\";\n\nconst categorySubcategories: Record<string, string[]> = {\n  \"patta-poth\": [\"long\", \"short\"],\n  \"necklace\": [\"temple-22k\", \"fancy-22k\", \"classic-22k\", \"fancy-20k\", \"classic-20k\", \"arbi-20k\"],\n  \"fancy-poth\": [\"with-pendant\", \"cartier\", \"nano\", \"short\", \"long\"],\n  \"choker\": [\"temple\", \"yellow\"],\n};\n\nconst categoryNames: Record<string, string> = {\n  \"patta-poth\": \"Patta Poth 22K\",\n  \"necklace\": \"Necklaces\",\n  \"fancy-poth\": \"Fancy Poth 22K\",\n  \"choker\": \"Chokers 22K\",\n};\n\nexport default function CategoryPage() {\n  const { category, subcategory } = useParams<{ category: string; subcategory?: string }>();\n  const { t } = useLanguage();\n  const [selectedSubcategory, setSelectedSubcategory] = useState<string>(subcategory || \"\");\n  const [viewMode, setViewMode] = useState<\"grid\" | \"list\">(\"grid\");\n  const [materialFilter, setMaterialFilter] = useState<\"all\" | \"gold\" | \"silver\">(\"all\");\n\n  // Fetch products for category only\n  const { data: products = [], isLoading } = useQuery({\n    queryKey: [\"/api/products/category\", category],\n    enabled: !!category && !subcategory && !selectedSubcategory,\n  });\n\n  // Fetch products for subcategory (from URL or selected)\n  const currentSubcategory = subcategory || selectedSubcategory;\n  const { data: subcategoryProducts = [], isLoading: isSubcategoryLoading } = useQuery({\n    queryKey: [\"/api/products/category\", category, currentSubcategory],\n    enabled: !!category && !!currentSubcategory,\n  });\n\n  const currentProducts: any[] = currentSubcategory ? (subcategoryProducts as any[]) : (products as any[]);\n  const filteredProducts = materialFilter === \"all\" \n    ? currentProducts \n    : currentProducts.filter((p: any) => p.material === materialFilter);\n\n  const subcategories = category ? categorySubcategories[category] || [] : [];\n  const categoryName = category ? categoryNames[category] || category : \"\";\n  \n  // Show collection name for subcategory pages\n  const getPageTitle = () => {\n    if (subcategory) {\n      const subcategoryTitles: Record<string, string> = {\n        \"long\": \"Long Poth Collection\",\n        \"short\": \"Short Poth Collection\", \n        \"fancy-20k\": \"Fancy Necklace 20K Collection\",\n        \"temple-22k\": \"Temple Necklace 22K Collection\",\n        \"fancy-22k\": \"Fancy Necklace 22K Collection\",\n        \"with-pendant\": \"Fancy Poth With Pendant Collection\",\n        \"cartier\": \"Cartier Poth 22K Collection\",\n        \"temple\": \"Temple Choker 22K Collection\"\n      };\n      return subcategoryTitles[subcategory] || `${subcategory} Collection`;\n    }\n    return categoryName;\n  };\n\n  const handleSubcategoryClick = (subcategory: string) => {\n    if (selectedSubcategory === subcategory) {\n      setSelectedSubcategory(\"\");\n    } else {\n      setSelectedSubcategory(subcategory);\n    }\n  };\n\n  if (isLoading || isSubcategoryLoading) {\n    return (\n      <div className=\"min-h-screen bg-cream\">\n        <Header />\n        <div className=\"container mx-auto px-4 py-16\">\n          <div className=\"animate-pulse space-y-8\">\n            <div className=\"h-8 bg-gray-200 rounded w-64\"></div>\n            <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {[...Array(6)].map((_, i) => (\n                <div key={i} className=\"h-96 bg-gray-200 rounded-lg\"></div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-cream\">\n      <Header />\n      \n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Breadcrumb */}\n        <nav className=\"flex items-center space-x-2 text-sm text-gray-600 mb-8\">\n          <Link href=\"/\" className=\"hover:text-gold\">Home</Link>\n          <ChevronRight className=\"w-4 h-4\" />\n          <span className=\"font-medium text-navy capitalize\">{categoryName}</span>\n          {selectedSubcategory && (\n            <>\n              <ChevronRight className=\"w-4 h-4\" />\n              <span className=\"font-medium text-gold\">{selectedSubcategory}</span>\n            </>\n          )}\n        </nav>\n\n        {/* Page Header */}\n        <div className=\"text-center mb-12\">\n          <h1 className=\"font-playfair text-4xl font-bold text-navy mb-4\">\n            {getPageTitle()}\n          </h1>\n          <p className=\"text-gray-600 text-lg max-w-2xl mx-auto\">\n            {subcategory || selectedSubcategory\n              ? `Discover our authentic Mamdej Jewellers ${subcategory || selectedSubcategory} collection with traditional craftsmanship` \n              : `Explore our beautiful ${categoryName} collection with traditional and contemporary designs`\n            }\n          </p>\n          <div className=\"mt-4\">\n            <Badge variant=\"secondary\" className=\"bg-gold text-white\">\n              {filteredProducts.length} Authentic Designs Available\n            </Badge>\n          </div>\n        </div>\n\n        {/* Subcategory Filter */}\n        {subcategories.length > 0 && (\n          <div className=\"mb-8\">\n            <h3 className=\"font-semibold text-navy mb-4\">Browse by Style:</h3>\n            <div className=\"flex flex-wrap gap-3\">\n              <Button\n                variant={!selectedSubcategory ? \"default\" : \"outline\"}\n                size=\"sm\"\n                onClick={() => setSelectedSubcategory(\"\")}\n                className={!selectedSubcategory ? \"gold-gradient text-white\" : \"\"}\n              >\n                All {categoryName}\n              </Button>\n              {subcategories.map((sub) => (\n                <Button\n                  key={sub}\n                  variant={selectedSubcategory === sub ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  onClick={() => handleSubcategoryClick(sub)}\n                  className={selectedSubcategory === sub ? \"gold-gradient text-white\" : \"\"}\n                >\n                  {sub}\n                </Button>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Filters */}\n        <div className=\"flex flex-wrap items-center justify-between mb-8 gap-4\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Filter className=\"w-4 h-4 text-gray-500\" />\n              <span className=\"text-sm font-medium text-gray-700\">Material:</span>\n              <select\n                value={materialFilter}\n                onChange={(e) => setMaterialFilter(e.target.value as any)}\n                className=\"border border-gray-300 rounded px-3 py-1 text-sm\"\n              >\n                <option value=\"all\">All Materials</option>\n                <option value=\"gold\">Gold Only</option>\n                <option value=\"silver\">Silver Only</option>\n              </select>\n            </div>\n          </div>\n\n          <div className=\"flex items-center space-x-2\">\n            <span className=\"text-sm text-gray-600\">{filteredProducts.length} products</span>\n            <div className=\"flex border border-gray-300 rounded\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setViewMode(\"grid\")}\n                className={`rounded-none ${viewMode === \"grid\" ? \"bg-gold text-white\" : \"\"}`}\n              >\n                <Grid className=\"w-4 h-4\" />\n              </Button>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setViewMode(\"list\")}\n                className={`rounded-none ${viewMode === \"list\" ? \"bg-gold text-white\" : \"\"}`}\n              >\n                <List className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        {/* Products Grid */}\n        {filteredProducts.length > 0 ? (\n          <div className={`grid gap-6 mb-16 ${\n            viewMode === \"grid\" \n              ? \"md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4\" \n              : \"grid-cols-1 md:grid-cols-2\"\n          }`}>\n            {filteredProducts.map((product: any) => (\n              <ProductCard key={product.id} product={product} />\n            ))}\n          </div>\n        ) : (\n          <div className=\"text-center py-16\">\n            <div className=\"w-24 h-24 bg-gray-200 rounded-full mx-auto mb-4 flex items-center justify-center\">\n              <Filter className=\"w-8 h-8 text-gray-400\" />\n            </div>\n            <h3 className=\"font-semibold text-lg text-gray-700 mb-2\">\n              No products found\n            </h3>\n            <p className=\"text-gray-500 mb-4\">\n              Try adjusting your filters or browse other categories\n            </p>\n            <Button \n              onClick={() => {\n                setSelectedSubcategory(\"\");\n                setMaterialFilter(\"all\");\n              }}\n              className=\"gold-gradient text-white\"\n            >\n              Clear Filters\n            </Button>\n          </div>\n        )}\n      </div>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":9354},"client/src/pages/Home.tsx":{"content":"import Header from \"@/components/Header\";\nimport RatesDisplay from \"@/components/RatesDisplay\";\nimport HeroSection from \"@/components/HeroSection\";\nimport CategoriesSection from \"@/components/CategoriesSection\";\nimport FeaturedProducts from \"@/components/FeaturedProducts\";\nimport WhyChooseUs from \"@/components/WhyChooseUs\";\nimport ContactSection from \"@/components/ContactSection\";\nimport Footer from \"@/components/Footer\";\n\nimport ChatWidget from \"@/components/ChatWidget\";\nimport CallButton from \"@/components/CallButton\";\n\nexport default function Home() {\n  return (\n    <div className=\"min-h-screen bg-cream text-charcoal\">\n      <Header />\n      <RatesDisplay />\n      <HeroSection />\n      <FeaturedProducts />\n      <CategoriesSection />\n      \n\n      \n      <ContactSection />\n      <WhyChooseUs />\n      <Footer />\n      <ChatWidget />\n      <CallButton />\n    </div>\n  );\n}\n","size_bytes":886},"client/src/pages/ProductPage.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useRoute } from \"wouter\";\nimport Header from \"@/components/Header\";\nimport RatesDisplay from \"@/components/RatesDisplay\";\nimport Footer from \"@/components/Footer\";\nimport ChatWidget from \"@/components/ChatWidget\";\nimport CallButton from \"@/components/CallButton\";\nimport { Product } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { ArrowLeft, Heart, Share2, Phone } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport default function ProductPage() {\n  const [, params] = useRoute(\"/product/:id\");\n  const productId = params?.id;\n\n  const { data: product, isLoading } = useQuery<Product>({\n    queryKey: [\"/api/products\", productId],\n    enabled: !!productId,\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-cream text-charcoal\">\n        <Header />\n        <RatesDisplay />\n        \n        <section className=\"py-16\">\n          <div className=\"container mx-auto px-4\">\n            <div className=\"grid lg:grid-cols-2 gap-12\">\n              <Skeleton className=\"w-full h-96 rounded-2xl\" />\n              <div className=\"space-y-6\">\n                <Skeleton className=\"h-8 w-3/4\" />\n                <Skeleton className=\"h-4 w-full\" />\n                <Skeleton className=\"h-12 w-1/2\" />\n                <Skeleton className=\"h-10 w-full\" />\n              </div>\n            </div>\n          </div>\n        </section>\n      </div>\n    );\n  }\n\n  if (!product) {\n    return (\n      <div className=\"min-h-screen bg-cream text-charcoal\">\n        <Header />\n        <RatesDisplay />\n        \n        <section className=\"py-16\">\n          <div className=\"container mx-auto px-4 text-center\">\n            <h1 className=\"text-2xl font-bold text-navy mb-4\">Product Not Found</h1>\n            <p className=\"text-gray-600 mb-8\">The product you're looking for doesn't exist or has been removed.</p>\n            <Link href=\"/\">\n              <Button>\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Back to Home\n              </Button>\n            </Link>\n          </div>\n        </section>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-cream text-charcoal\">\n      <Header />\n      <RatesDisplay />\n      \n      <section className=\"py-16\">\n        <div className=\"container mx-auto px-4\">\n          <Link href=\"/\" className=\"inline-flex items-center text-gold hover:text-yellow-600 mb-8 transition-colors\">\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back to Home\n          </Link>\n\n          <div className=\"grid lg:grid-cols-2 gap-12\">\n            <div className=\"relative\">\n              <img\n                src={product.imageUrl}\n                alt={product.name}\n                className=\"w-full h-96 object-cover rounded-2xl shadow-2xl\"\n              />\n              <div className=\"absolute top-4 right-4 flex space-x-2\">\n                <Button size=\"sm\" variant=\"secondary\" className=\"w-10 h-10 p-0\">\n                  <Heart className=\"w-4 h-4\" />\n                </Button>\n                <Button size=\"sm\" variant=\"secondary\" className=\"w-10 h-10 p-0\">\n                  <Share2 className=\"w-4 h-4\" />\n                </Button>\n              </div>\n              {product.featured === 1 && (\n                <Badge className=\"absolute top-4 left-4 bg-gold text-white\">\n                  Featured\n                </Badge>\n              )}\n            </div>\n\n            <div className=\"space-y-6\">\n              <div>\n                <h1 className=\"font-playfair text-4xl font-bold text-navy mb-4\">\n                  {product.name}\n                </h1>\n                <p className=\"text-gray-600 text-lg leading-relaxed\">\n                  {product.description}\n                </p>\n              </div>\n\n              <div className=\"bg-white rounded-2xl p-6 shadow-lg\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"text-center\">\n                    <div className=\"text-3xl font-bold text-gold mb-2\">\n                      {product.weight}g\n                    </div>\n                    <div className=\"text-sm text-gray-600\">Weight</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-lg font-semibold text-navy mb-2\">\n                      {product.purity}\n                    </div>\n                    <div className=\"text-sm text-gray-600\">Purity</div>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center space-x-2\">\n                  <span className=\"font-semibold text-navy\">Material:</span>\n                  <Badge variant=\"outline\" className=\"capitalize\">\n                    {product.material}\n                  </Badge>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <span className=\"font-semibold text-navy\">Category:</span>\n                  <Badge variant=\"outline\" className=\"capitalize\">\n                    {product.category}\n                  </Badge>\n                </div>\n              </div>\n\n              <div className=\"flex space-x-4\">\n                <Button className=\"flex-1 gold-gradient text-white hover:shadow-lg transition-all duration-300\">\n                  Get Quote\n                </Button>\n                <Button variant=\"outline\" className=\"flex-1\" asChild>\n                  <a href=\"tel:+919876543210\">\n                    <Phone className=\"w-4 h-4 mr-2\" />\n                    Call Now\n                  </a>\n                </Button>\n              </div>\n\n              <div className=\"bg-amber-50 border border-amber-200 rounded-lg p-4\">\n                <h3 className=\"font-semibold text-navy mb-2\">\n                  <i className=\"fas fa-info-circle text-amber-500 mr-2\"></i>\n                  Important Note\n                </h3>\n                <p className=\"text-sm text-gray-700\">\n                  Final pricing is based on current gold/silver rates and the exact weight of the jewelry. \n                  Please visit our store or call us for accurate pricing and availability.\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      <Footer />\n      <ChatWidget />\n      <CallButton />\n    </div>\n  );\n}\n","size_bytes":6502},"client/src/pages/Products.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport type { Product } from \"@shared/schema\";\nimport Footer from \"@/components/Footer\";\n\nexport default function Products() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [categoryFilter, setCategoryFilter] = useState(\"all\");\n  const [materialFilter, setMaterialFilter] = useState(\"all\");\n  const [sortBy, setSortBy] = useState(\"name\");\n\n  const { data: products = [], isLoading } = useQuery<Product[]>({\n    queryKey: [\"/api/products\"],\n  });\n\n  const { data: rates = [] } = useQuery<any[]>({\n    queryKey: [\"/api/rates\"],\n  });\n\n  // Filter and sort products\n  const filteredProducts = products\n    .filter((product: Product) => {\n      const matchesSearch = product.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                           product.description.toLowerCase().includes(searchTerm.toLowerCase());\n      const matchesCategory = categoryFilter === \"all\" || product.category === categoryFilter;\n      const matchesMaterial = materialFilter === \"all\" || product.material === materialFilter;\n      return matchesSearch && matchesCategory && matchesMaterial;\n    })\n    .sort((a: Product, b: Product) => {\n      switch (sortBy) {\n        case \"name\":\n          return a.name.localeCompare(b.name);\n        case \"weight\":\n          return parseFloat(b.weight) - parseFloat(a.weight);\n        case \"category\":\n          return a.category.localeCompare(b.category);\n        default:\n          return 0;\n      }\n    });\n\n  const calculatePrice = (product: Product) => {\n    const goldRate = rates.find((r: any) => r.material === \"gold\")?.rate || 9122;\n    const silverRate = rates.find((r: any) => r.material === \"silver\")?.rate || 102;\n    \n    const baseRate = product.material === \"gold\" ? goldRate : silverRate;\n    const pricePerGram = product.pricePerGram ? parseFloat(product.pricePerGram) : baseRate;\n    return parseFloat(product.weight) * pricePerGram;\n  };\n\n  const categories = [\n    { value: \"all\", label: \"All Categories\" },\n    { value: \"patta-poth\", label: \"Patta Poth 22K\" },\n    { value: \"necklace\", label: \"Necklaces\" },\n    { value: \"fancy-poth\", label: \"Fancy Poth 22K\" },\n    { value: \"choker\", label: \"Chokers 22K\" },\n  ];\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-cream flex items-center justify-center\">\n        <div className=\"text-center\">\n          <i className=\"fas fa-spinner fa-spin text-4xl text-gold mb-4\"></i>\n          <p className=\"text-lg\">Loading our beautiful collection...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-cream\">\n      {/* Header */}\n      <div className=\"bg-navy text-white py-8\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center\">\n            <h1 className=\"text-4xl font-playfair font-bold mb-4\">\n              <i className=\"fas fa-gem mr-3\"></i>\n              Complete Jewelry Collection\n            </h1>\n            <p className=\"text-lg text-gray-300 max-w-2xl mx-auto\">\n              Discover our authentic Mamdej Jewellers catalog featuring traditional designs \n              in premium 22K and 20K gold jewelry\n            </p>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Filters */}\n        <div className=\"bg-white rounded-lg shadow-sm p-6 mb-8\">\n          <div className=\"grid md:grid-cols-5 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium mb-2\">Search Products</label>\n              <Input\n                placeholder=\"Search jewelry...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"w-full\"\n              />\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium mb-2\">Category</label>\n              <Select value={categoryFilter} onValueChange={setCategoryFilter}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select category\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {categories.map((cat) => (\n                    <SelectItem key={cat.value} value={cat.value}>\n                      {cat.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium mb-2\">Material</label>\n              <Select value={materialFilter} onValueChange={setMaterialFilter}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select material\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Materials</SelectItem>\n                  <SelectItem value=\"gold\">Gold</SelectItem>\n                  <SelectItem value=\"silver\">Silver</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium mb-2\">Sort By</label>\n              <Select value={sortBy} onValueChange={setSortBy}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Sort by\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"name\">Name</SelectItem>\n                  <SelectItem value=\"weight\">Weight</SelectItem>\n                  <SelectItem value=\"category\">Category</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"flex items-end\">\n              <Button \n                onClick={() => {\n                  setSearchTerm(\"\");\n                  setCategoryFilter(\"all\");\n                  setMaterialFilter(\"all\");\n                  setSortBy(\"name\");\n                }}\n                variant=\"outline\"\n                className=\"w-full\"\n              >\n                <i className=\"fas fa-undo mr-2\"></i>\n                Reset\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        {/* Results Info */}\n        <div className=\"flex justify-between items-center mb-6\">\n          <p className=\"text-gray-600\">\n            Showing {filteredProducts.length} of {(products as Product[]).length} products\n          </p>\n          <div className=\"flex items-center space-x-4\">\n            <Link href=\"/\">\n              <Button variant=\"outline\">\n                <i className=\"fas fa-home mr-2\"></i>\n                Back to Home\n              </Button>\n            </Link>\n          </div>\n        </div>\n\n        {/* Products Grid */}\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n          {filteredProducts.map((product: Product) => (\n            <Card key={product.id} className=\"overflow-hidden hover:shadow-lg transition-shadow\">\n              <div className=\"aspect-square overflow-hidden\">\n                <img \n                  src={product.imageUrl} \n                  alt={product.name}\n                  className=\"w-full h-full object-cover hover:scale-105 transition-transform duration-300\"\n                />\n              </div>\n              <CardHeader className=\"pb-2\">\n                <div className=\"flex justify-between items-start mb-2\">\n                  <CardTitle className=\"text-lg line-clamp-2\">{product.name}</CardTitle>\n                  <div className=\"flex flex-col space-y-1\">\n                    {product.featured === 1 && (\n                      <Badge variant=\"secondary\" className=\"bg-gold text-white\">\n                        Featured\n                      </Badge>\n                    )}\n                    {product.stock === 0 && (\n                      <Badge variant=\"destructive\">\n                        Out of Stock\n                      </Badge>\n                    )}\n                  </div>\n                </div>\n                <CardDescription className=\"line-clamp-2\">\n                  {product.description}\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"pt-0\">\n                <div className=\"space-y-2 text-sm mb-4\">\n                  <div className=\"flex justify-between\">\n                    <span>Weight:</span>\n                    <span className=\"font-medium\">{product.weight}g</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Purity:</span>\n                    <span className=\"font-medium\">{product.purity}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Category:</span>\n                    <span className=\"font-medium capitalize\">{product.category.replace('-', ' ')}</span>\n                  </div>\n                  {product.subcategory && (\n                    <div className=\"flex justify-between\">\n                      <span>Type:</span>\n                      <span className=\"font-medium capitalize\">{product.subcategory.replace('-', ' ')}</span>\n                    </div>\n                  )}\n                  <div className=\"flex justify-between pt-2 border-t\">\n                    <span>Price:</span>\n                    <span className=\"font-bold text-gold\">\n                      ₹{calculatePrice(product).toLocaleString('en-IN')}\n                    </span>\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Link href={`/product/${product.id}`}>\n                    <Button className=\"w-full gold-gradient text-white\">\n                      <i className=\"fas fa-eye mr-2\"></i>\n                      View Details\n                    </Button>\n                  </Link>\n                  <Button \n                    variant=\"outline\" \n                    className=\"w-full\"\n                    disabled={product.stock === 0}\n                  >\n                    <i className=\"fas fa-shopping-cart mr-2\"></i>\n                    {product.stock === 0 ? \"Out of Stock\" : \"Add to Cart\"}\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {filteredProducts.length === 0 && (\n          <div className=\"text-center py-12\">\n            <i className=\"fas fa-search text-4xl text-gray-400 mb-4\"></i>\n            <h3 className=\"text-xl font-semibold mb-2\">No products found</h3>\n            <p className=\"text-gray-600 mb-4\">Try adjusting your search criteria</p>\n            <Button \n              onClick={() => {\n                setSearchTerm(\"\");\n                setCategoryFilter(\"all\");\n                setMaterialFilter(\"all\");\n              }}\n              className=\"gold-gradient text-white\"\n            >\n              Clear Filters\n            </Button>\n          </div>\n        )}\n      </div>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":11322},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"import * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}","size_bytes":3834},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }","size_bytes":1882},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }","size_bytes":771},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}}}